var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
define("lib/types/matrix.types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("lib/types/model.types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Base type definition for all the models
     * @ignore
     */
    var IMlModel = /** @class */ (function () {
        function IMlModel() {
        }
        return IMlModel;
    }());
    exports.IMlModel = IMlModel;
});
define("lib/types/index", ["require", "exports", "lib/types/model.types"], function (require, exports, model_types_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IMlModel = model_types_1.IMlModel;
});
define("lib/ops/tensor_ops", ["require", "exports", "@tensorflow/tfjs", "lodash"], function (require, exports, tf, lodash_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    tf = __importStar(tf);
    /**
     * Infers shape of a tensor using TF
     *
     * @example
     * inferShape(1) // exception
     * inferShape(true) // exception
     * inferShape([1, 2]) // [2]
     * inferShape([[1, 2], [3, 4]]) // [2, 2]
     *
     * @param X
     * @ignore
     */
    function inferShape(X) {
        return tf.tensor(X).shape;
    }
    exports.inferShape = inferShape;
    /**
     * Validates the input matrix's types with the targetted types.
     * Specified target types must be one of https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof#Description
     *
     * @example
     * validateMatrixType([['z', 'z']],['string']); // no errors
     * validateMatrixType([['z', 'z']],['test']); // error: Input matrix type of ["string"] does not match with the target types ["test"]
     *
     * @param X - The input matrix
     * @param targetTypes - Target matrix types
     * @ignore
     */
    function validateMatrixType(X, targetTypes) {
        var flatX = lodash_1.flattenDeep(X);
        var xTypes = lodash_1.uniq(flatX.map(function (x) { return typeof x; }));
        var sortedXTypes = lodash_1.sortBy(xTypes, function (x) { return x; });
        var sortedTargetTypes = lodash_1.sortBy(targetTypes, function (x) { return x; });
        if (!lodash_1.isEqual(sortedXTypes, sortedTargetTypes)) {
            throw new TypeError("Input matrix type of " + JSON.stringify(sortedXTypes) + " does not match with the target types " + JSON.stringify(sortedTargetTypes));
        }
    }
    exports.validateMatrixType = validateMatrixType;
    /**
     * Validate typical X and y train data and check they are 2D and 1D shaped respectively
     *
     * @example
     * validateTrainInputs([ [1, 2], [3, 4] ], [ 1, 2 ]) // No errors
     * validateTrainInputs([ [[1, 2], [3, 3]], [[1, 2], [3, 3]] ], [ 1, 2 ]) // Error: The matrix is not 1D shaped: [ [[1, 2], [3, 3]], [[1, 2], [3, 3]] ] of [2, 2, 2]
     *
     * @param X
     * @param y
     * @ignore
     */
    function validateFitInputs(X, y) {
        if ((Array.isArray(X) && X.length === 0) ||
            (Array.isArray(y) && y.length === 0)) {
            throw new Error('Input cannot be an empty array');
        }
        // Check X is always a matrix
        var sampleShape = validateMatrix2D(X);
        // Check y is always a vector
        var targetShape = validateMatrix1D(y);
        if (sampleShape[0] !== targetShape[0]) {
            throw new TypeError("Number of labels=" + targetShape[0] + " does not math number of samples=" + sampleShape[0]);
        }
    }
    exports.validateFitInputs = validateFitInputs;
    /**
     * Validate the matrix is 1D shaped by checking the shape's length is exactly  1
     * @param X
     * @ignore
     */
    function validateMatrix1D(X) {
        var shape = inferShape(X);
        if (shape.length !== 1 || shape[0] === 0) {
            throw new TypeError("The matrix is not 1D shaped: " + JSON.stringify(X) + " of " + JSON.stringify(shape));
        }
        return shape;
    }
    exports.validateMatrix1D = validateMatrix1D;
    /**
     * Validate the matrix is 2D shaped by checking the shape's length is exactly 2
     * @param X - An input array
     * @ignore
     */
    function validateMatrix2D(X) {
        var shape = inferShape(X);
        if (shape.length !== 2) {
            throw new TypeError("The matrix is not 2D shaped: " + JSON.stringify(X) + " of " + JSON.stringify(shape));
        }
        return shape;
    }
    exports.validateMatrix2D = validateMatrix2D;
    /**
     * Reshapes any size of array into a new shape.
     *
     * The code was borrowed from math.js (https://github.com/josdejong/mathjs/blob/5750a1845442946d236822505c607a522be23474/src/utils/array.js#L258),
     * which enables us to use a specific method from Math.js instead of installing an entire library.
     *
     * TF.js has implemented an efficient way to return raw values from its Tensor implementation that always returns a 1D array,
     * which is not ideal in situations where we need a return value with correct shapes.
     *
     * Please check out https://github.com/tensorflow/tfjs/issues/939 for more information
     *
     * @example
     * reshape([1, 2, 3, 4, 5, 6], [2, 3]); // [[1, 2, 3], [4, 5, 6]]
     * reshape([1, 2, 3, 4, 5, 6], [2, 3, 1]); // [[[1], [2], [3]], [[4], [5], [6]]]
     *
     * @param array - Target array
     * @param sizes - New array shape to resize into
     * @ignore
     */
    function reshape(array, sizes) {
        // Initial validations
        if (!Array.isArray(array)) {
            throw new TypeError('The input array must be an array!');
        }
        if (!Array.isArray(sizes)) {
            throw new TypeError('The sizes must be an array!');
        }
        var deepFlatArray = lodash_1.flattenDeep(array);
        // If the reshaping is to single dimensional
        if (sizes.length === 1 && deepFlatArray.length === sizes[0]) {
            return deepFlatArray;
        }
        else if (sizes.length === 1 && deepFlatArray.length !== sizes[0]) {
            throw new TypeError("Target array shape [" + deepFlatArray.length + "] cannot be reshaped into " + sizes);
        }
        // testing if there are enough elements for the requested shape
        var tmpArray = deepFlatArray;
        var tmpArray2;
        // for each dimensions starting by the last one and ignoring the first one
        for (var sizeIndex = sizes.length - 1; sizeIndex > 0; sizeIndex--) {
            var size = sizes[sizeIndex];
            tmpArray2 = [];
            // aggregate the elements of the current tmpArray in elements of the requested size
            var length_1 = tmpArray.length / size;
            for (var i = 0; i < length_1; i++) {
                tmpArray2.push(tmpArray.slice(i * size, (i + 1) * size));
            }
            // set it as the new tmpArray for the next loop turn or for return
            tmpArray = tmpArray2;
        }
        return tmpArray;
    }
    exports.reshape = reshape;
});
define("lib/ops/index", ["require", "exports", "lib/ops/tensor_ops"], function (require, exports, tensor_ops_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.inferShape = tensor_ops_1.inferShape;
    exports.reshape = tensor_ops_1.reshape;
    exports.validateFitInputs = tensor_ops_1.validateFitInputs;
    exports.validateMatrix1D = tensor_ops_1.validateMatrix1D;
    exports.validateMatrix2D = tensor_ops_1.validateMatrix2D;
    exports.validateMatrixType = tensor_ops_1.validateMatrixType;
});
define("lib/utils/MathExtra", ["require", "exports", "lodash"], function (require, exports, _) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    _ = __importStar(_);
    /**
     * Return the number of elements along a given axis.
     * @param {any} X: Array like input data
     * @param {any} axis
     * @ignore
     */
    var size = function (X, axis) {
        if (axis === void 0) { axis = 0; }
        var rows = _.size(X);
        if (rows === 0) {
            throw new Error('Invalid input array of size 0!');
        }
        if (axis === 0) {
            return rows;
        }
        else if (axis === 1) {
            return _.flowRight(_.size, function (a) { return _.get(a, '[0]'); })(X);
        }
        throw new Error("Invalid axis value " + axis + " was given");
    };
    /**
     * Just a dumb version of subset, which is sufficient enough for now.
     * It can only handle range of rows with a single column.
     *
     * TODO: Improve.
     * @param X
     * @param rowsRange
     * @param colsRange
     * @ignore
     */
    var subset = function (X, rowsRange, colsRange, replacement) {
        if (replacement === void 0) { replacement = null; }
        // console.log('checking subset', X, rowsRange, colsRange, replacement);
        if (replacement) {
            var _X_1 = _.cloneDeep(X);
            var _loop_1 = function (i) {
                var rowIndex = rowsRange[i];
                colsRange.forEach(function (col) {
                    _X_1[rowIndex][col] = replacement[i];
                });
            };
            for (var i = 0; i < rowsRange.length; i++) {
                _loop_1(i);
            }
            return _X_1;
        }
        else {
            var result = [];
            var _loop_2 = function (i) {
                var rowIndex = rowsRange[i];
                var subSection = [];
                colsRange.forEach(function (col) {
                    subSection.push(X[rowIndex][col]);
                });
                // result.push([X[rowIndex][col]]);
                result.push(subSection);
            };
            // TODO: Replace it with a proper matrix subset method. e.g. http://mathjs.org/docs/reference/functions/subset.html
            for (var i = 0; i < rowsRange.length; i++) {
                _loop_2(i);
            }
            return result;
        }
    };
    /**
     * Get range of values
     * @param start
     * @param stop
     * @ignore
     */
    var range = function (start, stop) {
        if (!_.isNumber(start) || !_.isNumber(stop)) {
            throw new Error('start and stop arguments need to be numbers');
        }
        return _.range(start, stop);
    };
    /**
     * Checking the maxtrix is a matrix of a certain data type (e.g. number)
     * The function also performs isMatrix against the passed in dataset
     * @param matrix
     * @param {string} _type
     * @ignore
     */
    var isMatrixOf = function (matrix, _type) {
        if (_type === void 0) { _type = 'number'; }
        if (!isMatrix(matrix)) {
            throw Error("Cannot perform isMatrixOf " + _type + " unless the data is matrix");
        }
        // Checking each elements inside the matrix is not number
        // Returns an array of result per row
        var vectorChecks = matrix.map(function (arr) {
            return arr.some(function (x) {
                // Checking type of each element
                if (_type === 'number') {
                    return !_.isNumber(x);
                }
                else {
                    throw Error('Cannot check matrix of an unknown type');
                }
            });
        });
        // All should be false
        return vectorChecks.indexOf(true) === -1;
    };
    /**
     * Checking the matrix is a data of multiple rows
     * @param matrix
     * @returns {boolean}
     * @ignore
     */
    var isMatrix = function (matrix) {
        if (!Array.isArray(matrix)) {
            return false;
        }
        if (_.size(matrix) === 0) {
            return false;
        }
        var isAllArray = matrix.map(function (arr) { return _.isArray(arr); });
        return isAllArray.indexOf(false) === -1;
    };
    /**
     * Checking the array is a type of X
     * @param arr
     * @param {string} _type
     * @returns {boolean}
     * @ignore
     */
    var isArrayOf = function (arr, _type) {
        if (_type === void 0) { _type = 'number'; }
        if (_type === 'number') {
            return !arr.some(isNaN);
        }
        else if (_type === 'string') {
            return !arr.some(function (x) { return !_.isString(x); });
        }
        throw Error("Failed to check the array content of type " + _type);
    };
    /**
     *
     * @param {number[]} v1
     * @param {number[]} v2
     * @returns {number}
     * @ignore
     */
    var euclideanDistance = function (v1, v2) {
        var v1Range = _.range(0, v1.length);
        var initialTotal = 0;
        var total = _.reduce(v1Range, function (sum, i) {
            return sum + Math.pow(v2[i] - v1[i], 2);
        }, initialTotal);
        return Math.sqrt(total);
    };
    /**
     *
     * @param {number[]} v1
     * @param {number[]} v2
     * @returns {number}
     * @ignore
     */
    var manhattanDistance = function (v1, v2) {
        var v1Range = _.range(0, v1.length);
        var initialTotal = 0;
        return _.reduce(v1Range, function (total, i) {
            return total + Math.abs(v2[i] - v1[i]);
        }, initialTotal);
    };
    /**
     * Subtracts two matrices
     * @param X
     * @param y
     * @ignore
     */
    var subtract = function (X, y) {
        var _X = _.clone(X);
        for (var rowIndex = 0; rowIndex < _X.length; rowIndex++) {
            var row = X[rowIndex];
            for (var colIndex = 0; colIndex < row.length; colIndex++) {
                var column = row[colIndex];
                // Supports y.length === 1 or y.length === row.length
                if (y.length === 1) {
                    var subs = y[0];
                    _X[rowIndex][colIndex] = column - subs;
                }
                else if (y.length === row.length) {
                    var subs = y[colIndex];
                    _X[rowIndex][colIndex] = column - subs;
                }
                else {
                    throw Error("Dimension of y " + y.length + " and row " + row.length + " are not compatible");
                }
            }
        }
        return _X;
    };
    /**
     * Calculates covariance
     * @param X
     * @param xMean
     * @param y
     * @param yMean
     * @returns {number}
     * @ignore
     */
    var covariance = function (X, xMean, y, yMean) {
        if (_.size(X) !== _.size(y)) {
            throw new Error('X and y should match in size');
        }
        var covar = 0.0;
        for (var i = 0; i < _.size(X); i++) {
            covar += (X[i] - xMean) * (y[i] - yMean);
        }
        return covar;
    };
    /**
     * Calculates the variance
     * needed for linear regression
     * @param X
     * @param mean
     * @returns {number}
     * @ignore
     */
    var variance = function (X, mean) {
        if (!Array.isArray(X)) {
            throw new Error('X must be an array');
        }
        var result = 0.0;
        for (var i = 0; i < _.size(X); i++) {
            result += Math.pow(X[i] - mean, 2);
        }
        return result;
    };
    /**
     * Stack arrays in sequence horizontally (column wise).
     * This is equivalent to concatenation along the second axis, except for 1-D
     * arrays where it concatenates along the first axis. Rebuilds arrays divided by hsplit.
     *
     * @example
     * hstack([[1], [1]], [[ 0, 1, 2 ], [ 1, 0, 3 ]])
     * returns [ [ 1, 0, 1, 2 ], [ 1, 1, 0, 3 ] ]
     * @param X
     * @param y
     * @ignore
     */
    var hstack = function (X, y) {
        var stack = [];
        if (isMatrix(X) && isMatrix(y)) {
            for (var i = 0; i < X.length; i++) {
                var xEntity = X[i];
                var yEntity = y[i];
                stack.push(hstack(xEntity, yEntity));
            }
        }
        else if (Array.isArray(X) && Array.isArray(y)) {
            stack = _.concat(X, y);
            stack = _.flatten(stack);
        }
        else {
            throw Error('Input should be either matrix or Arrays');
        }
        return stack;
    };
    /**
     * Validating the left input is an array, and the right input is a pure number.
     * @param a
     * @param b
     * @ignore
     */
    var isArrayNumPair = function (a, b) { return Array.isArray(a) && _.isNumber(b); };
    /**
     * Inner product of two arrays.
     * Ordinary inner product of vectors for 1-D arrays (without complex conjugation),
     * in higher dimensions a sum product over the last axes.
     * @param a
     * @param b
     * @ignore
     */
    var inner = function (a, b) {
        /**
         * Internal methods to process the inner product
         * @param a - First vector
         * @param b - Second vector or a number
         */
        // 1. If a and b are both pure numbers
        if (_.isNumber(a) && _.isNumber(b)) {
            return a * b;
        }
        // If a is a vector and b is a pure number
        if (isArrayNumPair(a, b)) {
            return a.map(function (x) { return x * b; });
        }
        // If b is a vector and a is a pure number
        if (isArrayNumPair(b, a)) {
            return b.map(function (x) { return x * a; });
        }
        // If a and b are both vectors with an identical size
        if (Array.isArray(a) && Array.isArray(b) && a.length === b.length) {
            var result = 0;
            for (var i = 0; i < a.length; i++) {
                result += a[i] * b[i];
            }
            return result;
        }
        else if (Array.isArray(a) && Array.isArray(b) && a.length !== b.length) {
            throw new Error("Dimensions (" + a.length + ",) and (" + b.length + ",) are not aligned");
        }
        throw new Error("Cannot process with the invalid inputs " + a + " and " + b);
    };
    var math = {
        covariance: covariance,
        euclideanDistance: euclideanDistance,
        hstack: hstack,
        isArrayOf: isArrayOf,
        inner: inner,
        isMatrix: isMatrix,
        isMatrixOf: isMatrixOf,
        manhattanDistance: manhattanDistance,
        range: range,
        subset: subset,
        size: size,
        subtract: subtract,
        variance: variance
    };
    exports.default = math;
});
define("lib/cluster/k_means", ["require", "exports", "lodash", "random-js", "lib/ops/index", "lib/utils/MathExtra"], function (require, exports, _, Random, ops_1, MathExtra_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    _ = __importStar(_);
    Random = __importStar(Random);
    MathExtra_1 = __importDefault(MathExtra_1);
    /**
     * K-Means clustering
     *
     * @example
     * import { KMeans } from 'machinelearn/cluster';
     *
     * const kmean = new KMeans({ k: 2 });
     * const clusters = kmean.fit([[1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0]]);
     *
     * const result = kmean.predict([[0, 0], [4, 4]]);
     * // results in: [0, 1]
     */
    var KMeans = /** @class */ (function () {
        /**
         *
         * @param distance - Choice of distance method. Defaulting to euclidean
         * @param k - Number of clusters
         * @param maxIteration - Relative tolerance with regards to inertia to declare convergence
         * @param randomState - Random state value for sorting centroids during the getInitialCentroid phase
         */
        function KMeans(_a) {
            var _b = _a === void 0 ? {
                distance: 'euclidean',
                k: 3,
                maxIteration: 300,
                randomState: 0
            } : _a, _c = _b.distance, distance = _c === void 0 ? 'euclidean' : _c, _d = _b.k, k = _d === void 0 ? 3 : _d, _e = _b.maxIteration, maxIteration = _e === void 0 ? 300 : _e, _f = _b.randomState, randomState = _f === void 0 ? 0 : _f;
            this.k = k;
            // Assigning a distance method
            var distanceType = distance;
            switch (distanceType) {
                case 'euclidean':
                    this.distance = MathExtra_1.default.euclideanDistance;
                    break;
                case 'manhattan':
                    this.distance = MathExtra_1.default.manhattanDistance;
                    break;
                default:
                    throw new Error("Unknown distance type " + distanceType);
            }
            this.randomState = randomState;
            this.maxIteration = maxIteration;
            this.centroids = [];
        }
        /**
         * Compute k-means clustering.
         * @param {any} X - array-like or sparse matrix of shape = [n_samples, n_features]
         * @returns {{centroids: number[]; clusters: number[]}}
         */
        KMeans.prototype.fit = function (X) {
            var _this = this;
            if (X === void 0) { X = null; }
            ops_1.validateMatrix2D(X);
            this.assignment = new Array(_.size(X));
            this.centroids = this.getInitialCentroids(X, this.k);
            this.clusters = new Array(this.k);
            // Flag to check the convergence
            var movement = true;
            // Looping only within the maxIteration boundary
            for (var iter = 0; iter < this.maxIteration && movement; iter++) {
                // find the distance between the point and cluster; choose the nearest centroid
                _.forEach(X, function (data, i) {
                    _this.assignment[i] = _this.getClosestCentroids(data, _this.centroids, _this.distance);
                });
                // Flag set to false; giving opportunity to stop the loop upon the covergence
                movement = false;
                // Updating the location of each centroid
                for (var j = 0; j < this.k; j++) {
                    var assigned = [];
                    for (var i = 0; i < this.assignment.length; i++) {
                        if (this.assignment[i] === j) {
                            assigned.push(X[i]);
                        }
                    }
                    if (!assigned.length) {
                        continue;
                    }
                    // Getting the original data point
                    // TODO: Fix any type
                    var centroid = this.centroids[j];
                    var newCentroid = new Array(centroid.length);
                    for (var g = 0; g < centroid.length; g++) {
                        var sum = 0;
                        for (var i = 0; i < assigned.length; i++) {
                            sum += assigned[i][g];
                        }
                        newCentroid[g] = sum / assigned.length;
                        // Does not converge yet
                        if (newCentroid[g] !== centroid[g]) {
                            movement = true;
                        }
                    }
                    this.centroids[j] = newCentroid;
                    this.clusters[j] = assigned;
                }
            }
        };
        /**
         * Predicts the cluster index with the given X
         * @param {any} X - array-like or sparse matrix of shape = [n_samples, n_features]
         * @returns {number[]}
         */
        KMeans.prototype.predict = function (X) {
            var _this = this;
            if (X === void 0) { X = null; }
            ops_1.validateMatrix2D(X);
            return _.map(X, function (data) {
                return _this.getClosestCentroids(data, _this.centroids, _this.distance);
            });
        };
        /**
         * Get the model details in JSON format
         * @returns {{k: number; clusters: number[]; centroids: number[]}}
         */
        KMeans.prototype.toJSON = function () {
            return {
                centroids: this.centroids,
                clusters: this.clusters,
                k: this.k
            };
        };
        /**
         * Restores the model from checkpoints
         * @param {number} k
         * @param {number[]} clusters
         * @param {number[]} centroids
         */
        KMeans.prototype.fromJSON = function (_a) {
            var _b = _a.k, k = _b === void 0 ? null : _b, _c = _a.clusters, clusters = _c === void 0 ? null : _c, _d = _a.centroids, centroids = _d === void 0 ? null : _d;
            if (!k || !clusters || !centroids) {
                throw new Error('You must provide all the parameters include k, clusters and centroids');
            }
            this.k = k;
            this.clusters = clusters;
            this.centroids = centroids;
        };
        /**
         * Get initial centroids from X of k
         * @param {number[]} X
         * @param {number} k
         * @returns {number[]}
         */
        KMeans.prototype.getInitialCentroids = function (X, k) {
            // Create an initial copy
            var centroids = _.clone(X);
            // Sort the centroid randomly if the randomState is greater than 0
            if (this.randomState > 0) {
                var randomEngine_1 = Random.engines.mt19937();
                randomEngine_1.seed(this.randomState);
                centroids.sort(function () {
                    var randomInt = Random.integer(0, 1)(randomEngine_1);
                    return Math.round(randomInt) - 0.5;
                });
            }
            return centroids.slice(0, k);
        };
        /**
         * Get closest centroids based on the passed in distance method
         * @param {number[]} data
         * @param {number[]} centroids
         * @param distance
         * @returns {number}
         */
        KMeans.prototype.getClosestCentroids = function (data, centroids, distance) {
            var min = Infinity;
            var index = 0;
            _.forEach(centroids, function (centroid, i) {
                var dist = distance(data, centroid);
                if (dist < min) {
                    min = dist;
                    index = i;
                }
            });
            return index;
        };
        return KMeans;
    }());
    exports.KMeans = KMeans;
});
define("lib/cluster/index", ["require", "exports", "lib/cluster/k_means"], function (require, exports, k_means_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.KMeans = k_means_1.KMeans;
});
define("lib/preprocessing/label", ["require", "exports", "lodash", "lib/ops/index"], function (require, exports, lodash_2, ops_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Encode labels with value between 0 and n_classes-1.
     *
     * @example
     * import { LabelEncoder } from 'machinelearn/preprocessing';
     *
     * const labelEncoder = new LabelEncoder();
     * const labelX = ['amsterdam', 'paris', 'tokyo'];
     * labelEncoder.fit(labelX);
     * const transformX = ['tokyo', 'tokyo', 'paris'];
     * const result = labelEncoder.transform(transformX);
     * // [ 2, 2, 1 ]
     */
    var LabelEncoder = /** @class */ (function () {
        function LabelEncoder() {
        }
        /**
         * Fit label encoder
         * @param {any[]} X - Input data in array or matrix
         */
        LabelEncoder.prototype.fit = function (X) {
            if (X === void 0) { X = null; }
            ops_2.validateMatrix1D(X);
            this.classes = lodash_2.uniq(X);
        };
        /**
         * Transform labels to normalized encoding.
         *
         * Given classes of ['amsterdam', 'paris', 'tokyo']
         *
         * It transforms ["tokyo", "tokyo", "paris"]
         *
         * Into [2, 2, 1]
         * @param X - Input data to transform according to the fitted state
         */
        LabelEncoder.prototype.transform = function (X) {
            var _this = this;
            if (X === void 0) { X = null; }
            ops_2.validateMatrix1D(X);
            return lodash_2.map(X, function (item) {
                return lodash_2.findIndex(_this.classes, function (cur) { return cur === item; });
            });
        };
        return LabelEncoder;
    }());
    exports.LabelEncoder = LabelEncoder;
});
define("lib/datasets/BaseDataset", ["require", "exports", "fs-extra", "lodash", "path", "lib/preprocessing/label", "isomorphic-fetch"], function (require, exports, fs, lodash_3, path, label_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    fs = __importStar(fs);
    path = __importStar(path);
    /**
     * @ignore
     */
    var BaseDataset = /** @class */ (function () {
        function BaseDataset() {
        }
        /**
         * fetch load from a multiple
         * @param sources - A list of URLs to fetch the data from
         * @param type - type of data; for example CSV or JSON
         * @param delimiter - specify the data delimiter, which will be used to split the row data
         * @param lastIsTarget - tell the underlying processor that the last index of the dataset is the target data
         * @param trainType - data type to enforce on the training dataset
         * @param targetType - target type to enforce on the target dataset
         * @private
         */
        BaseDataset.prototype.fetchLoad = function (sources, _a) {
            if (sources === void 0) { sources = []; }
            var _b = _a === void 0 ? {
                // Default object if nothing is provided
                type: 'csv',
                delimiter: ',',
                lastIsTarget: true,
                trainType: 'float',
                targetType: 'float'
            } : _a, 
            // Params
            _c = _b.type, 
            // Params
            type = _c === void 0 ? 'csv' : _c, _d = _b.delimiter, delimiter = _d === void 0 ? ',' : _d, _e = _b.lastIsTarget, lastIsTarget = _e === void 0 ? true : _e, _f = _b.trainType, trainType = _f === void 0 ? 'float' : _f, _g = _b.targetType, targetType = _g === void 0 ? 'float' : _g;
            return __awaiter(this, void 0, void 0, function () {
                var data, i, url, response, status_1, textData;
                return __generator(this, function (_h) {
                    switch (_h.label) {
                        case 0:
                            data = null;
                            i = 0;
                            _h.label = 1;
                        case 1:
                            if (!(i < sources.length)) return [3 /*break*/, 5];
                            url = sources[i];
                            return [4 /*yield*/, fetch(url)];
                        case 2:
                            response = _h.sent();
                            status_1 = response.ok;
                            return [4 /*yield*/, response.text()];
                        case 3:
                            textData = _h.sent();
                            if (status_1 && textData) {
                                data = textData;
                                // No need to request data anymore
                                return [3 /*break*/, 5];
                            }
                            _h.label = 4;
                        case 4:
                            i++;
                            return [3 /*break*/, 1];
                        case 5:
                            if (type === 'csv') {
                                return [2 /*return*/, this.processCSV(data, delimiter, lastIsTarget, trainType, targetType)];
                            }
                            return [2 /*return*/, {
                                    data: null,
                                    targets: null,
                                    labels: null
                                }];
                    }
                });
            });
        };
        /**
         * Load data from the local data folder
         */
        BaseDataset.prototype.fsLoad = function (type, _a) {
            var _b = _a === void 0 ? {
                // Default object if nothing is provided
                delimiter: ',',
                lastIsTarget: true,
                trainType: 'float',
                targetType: 'float'
            } : _a, _c = _b.delimiter, delimiter = _c === void 0 ? ',' : _c, _d = _b.lastIsTarget, lastIsTarget = _d === void 0 ? true : _d, _e = _b.trainType, trainType = _e === void 0 ? 'float' : _e, _f = _b.targetType, targetType = _f === void 0 ? 'float' : _f;
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_g) {
                    data = fs.readFileSync(path.join(__dirname, "data/" + type + "/train.csv"), 'utf8');
                    return [2 /*return*/, this.processCSV(data, delimiter, lastIsTarget, trainType, targetType)];
                });
            });
        };
        /**
         * Processes CSV type dataset. Returns a training and testing data pair
         * @param data - a raw string data
         * @param delimiter - delimiter to split on
         * @param lastIsTarget - flag to indicate that the last element is the target data
         * @param trainType - training data type to enforce
         * @param targetType - target data type to enforce
         */
        BaseDataset.prototype.processCSV = function (data, delimiter, lastIsTarget, trainType, targetType) {
            if (delimiter === void 0) { delimiter = ','; }
            if (lastIsTarget === void 0) { lastIsTarget = true; }
            if (trainType === void 0) { trainType = 'float'; }
            if (targetType === void 0) { targetType = 'float'; }
            // Split the rows by newlines
            var splitRows = data.split(/\r\n|\n|\r/);
            // Trim any excessive spaces
            var trimmedRows = splitRows.map(function (row) { return row.trim(); });
            // Filtering out any empty rows
            var filteredRows = trimmedRows.filter(function (row) { return row; });
            // Organise training and target data
            var result = filteredRows.map(function (row) { return row.split(delimiter); });
            if (lastIsTarget) {
                result = result.reduce(function (sum, curValue) {
                    // Building the target values array
                    sum[1].push(curValue.pop());
                    // Building the train values array
                    sum[0].push(curValue);
                    return sum;
                }, [[], []]);
            }
            // Encode the classes
            var rawTest = result[1];
            var encoder = new label_1.LabelEncoder();
            // Get the unique labels
            var labelX = lodash_3.uniqBy(rawTest, function (x) { return x; });
            encoder.fit(labelX);
            // Encode the test values
            var targets = encoder.transform(rawTest);
            // Enforcing data type
            // 1. training data
            if (trainType === 'number') {
                result[0] = result[0].map(function (row) { return row.map(lodash_3.parseInt); });
            }
            else if (trainType === 'float') {
                result[0] = result[0].map(function (row) { return row.map(parseFloat); });
            }
            // 2. target data
            if (targetType === 'number') {
                result[1] = result[1].map(lodash_3.parseInt);
            }
            else if (targetType === 'float') {
                result[1] = result[1].map(parseFloat);
            }
            return {
                data: result[0],
                targets: targets,
                labels: result[1]
            };
        };
        return BaseDataset;
    }());
    exports.BaseDataset = BaseDataset;
});
/**
 * References:
 * - https://www.kaggle.com/c/boston-housing/data
 * - https://www.cs.toronto.edu/~delve/data/boston/bostonDetail.html
 */
define("lib/datasets/Boston", ["require", "exports", "lib/datasets/BaseDataset"], function (require, exports, BaseDataset_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * This dataset contains information collected by the U.S Census Service concerning housing in the area of Boston Mass.
     * It was obtained from the StatLib archive (http://lib.stat.cmu.edu/datasets/boston),
     * and has been used extensively throughout the literature to benchmark algorithms.
     * However, these comparisons were primarily done outside of Delve and are thus somewhat suspect.
     * The dataset is small in size with only 506 cases.
     *
     * The data was originally published by Harrison, D. and Rubinfeld, D.L.
     * `Hedonic prices and the demand for clean air', J. Environ. Economics & Management, vol.5, 81-102, 1978.
     *
     * @example
     * import { Boston } from "machinelearn/datasets";
     *
     * (async function() {
     *   const bostonData = new Boston();
     *   const {
     *     data,
     *     targets,
     *     labels,
     *   } = await bostonData.load();
     * });
     *
     */
    var Boston = /** @class */ (function (_super) {
        __extends(Boston, _super);
        function Boston() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * Load the dataset
         */
        Boston.prototype.load = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a, data, targets, labels;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, this.fsLoad('boston')];
                        case 1:
                            _a = _b.sent(), data = _a.data, targets = _a.targets, labels = _a.labels;
                            // console.info('checking data', data[0]);
                            return [2 /*return*/, {
                                    data: data,
                                    targets: targets,
                                    labels: labels
                                }];
                    }
                });
            });
        };
        return Boston;
    }(BaseDataset_1.BaseDataset));
    exports.Boston = Boston;
});
define("lib/datasets/Iris", ["require", "exports", "fs", "path", "lib/datasets/BaseDataset", "isomorphic-fetch"], function (require, exports, fs, path, BaseDataset_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    fs = __importStar(fs);
    path = __importStar(path);
    /**
     * The Iris flower data set or Fisher's Iris data set is a multivariate data set introduced by the British statistician and biologist Ronald Fisher
     * in his 1936 paper The use of multiple measurements in taxonomic problems as an example of linear discriminant analysis.
     *
     * It contains 50 samples with 3 classes of 'Setosa', 'versicolor' and 'virginica'
     *
     * @example
     * import { Iris } from 'machinelearn/datasets';
     *
     * (async function() {
     *   const irisData = new Iris();
     *   const {
     *     data,         // returns the iris data (X)
     *     targets,      // list of target values (y)
     *     labels,       // list of labels
     *     targetNames,  // list of short target labels
     *     description   // dataset description
     *   } = await irisData.load(); // loads the data internally
     * })();
     *
     */
    var Iris = /** @class */ (function (_super) {
        __extends(Iris, _super);
        function Iris() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * Load datasets
         */
        Iris.prototype.load = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a, data, targets, labels, targetNames, description;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, this.fsLoad('iris')];
                        case 1:
                            _a = _b.sent(), data = _a.data, targets = _a.targets, labels = _a.labels;
                            targetNames = ['setosa', 'versicolor', 'virginica'];
                            return [4 /*yield*/, fs.readFileSync(path.join(__dirname, './data/iris/iris.names'), 'utf8')];
                        case 2:
                            description = _b.sent();
                            return [2 /*return*/, {
                                    data: data,
                                    targets: targets,
                                    labels: labels,
                                    targetNames: targetNames,
                                    description: description
                                }];
                    }
                });
            });
        };
        return Iris;
    }(BaseDataset_2.BaseDataset));
    exports.Iris = Iris;
});
define("lib/datasets/index", ["require", "exports", "lib/datasets/Boston", "lib/datasets/Iris"], function (require, exports, Boston_1, Iris_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Boston = Boston_1.Boston;
    exports.Iris = Iris_1.Iris;
});
define("lib/decomposition/pca", ["require", "exports", "@tensorflow/tfjs", "numeric", "lib/ops/index"], function (require, exports, tf, numeric, ops_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    tf = __importStar(tf);
    numeric = __importStar(numeric);
    /**
     * Principal component analysis (PCA)
     *
     * Linear dimensionality reduction using Singular Value Decomposition of
     * the data to project it to a lower dimensional space.
     *
     * - It uses the LAPACK implementation of the full SVD
     * - or randomized a randomised truncated SVD by the method of
     * Halko et al. 2009, depending on the shape
     * of the input data and the number of components to extract. (Will be implemented)
     *
     * @example
     * import { PCA } from 'machinelearn/decomposition';
     *
     * const pca = new PCA();
     * const X = [[1, 2], [3, 4], [5, 6]];
     * pca.fit(X);
     * console.log(pca.components); // result: [ [ 0.7071067811865476, 0.7071067811865474 ], [ 0.7071067811865474, -0.7071067811865476 ] ]
     * console.log(pca.explained_variance); // result: [ [ -0.3535533905932736, 0 ], [ 0, 0.5 ], [ 0.35355339059327373, 0 ] ]
     */
    var PCA = /** @class */ (function () {
        function PCA() {
        }
        /**
         * Fit the model with X.
         * At the moment it does not take n_components into consideration
         * so it will only calculate Singular value decomposition
         * @param {any} X
         */
        PCA.prototype.fit = function (X) {
            ops_3.validateMatrix2D(X);
            ops_3.validateMatrixType(X, ['number']);
            var nSamples = X.length;
            // Renaming X to A for readability
            var A = tf.tensor2d(X);
            // const transposed = tf.transpose(A, [1, 0]);
            var AT = tf.transpose(A, [1, 0]);
            var M = tf.mean(AT, 1);
            var rawC = tf.sub(A, M);
            var C = ops_3.reshape(__spread(rawC.dataSync()), rawC.shape);
            var svd = numeric.svd(C);
            this.components = svd.V;
            this.explained_variance = numeric.div(numeric.pow(svd.U), nSamples - 1);
        };
        /**
         * Predict does nothing in PCA
         * @param X - A 2D matrix
         */
        PCA.prototype.predict = function (X) {
            if (X === void 0) { X = null; }
            console.info('Predict does nothing in PCA\n', X);
            return null;
        };
        /**
         * Saves the model's states
         */
        PCA.prototype.toJSON = function () {
            return {
                components: this.components,
                explained_variance: this.explained_variance
            };
        };
        /**
         * Restores the model from given states
         * @param components - Principal axes in feature space, representing the directions of maximum variance in the data.
         * @param explained_variance - The amount of variance explained by each of the selected components.
         */
        PCA.prototype.fromJSON = function (_a) {
            var _b = _a === void 0 ? {
                components: null,
                explained_variance: null
            } : _a, _c = _b.components, components = _c === void 0 ? null : _c, _d = _b.explained_variance, explained_variance = _d === void 0 ? null : _d;
            this.components = components;
            this.explained_variance = explained_variance;
        };
        return PCA;
    }());
    exports.PCA = PCA;
});
define("lib/decomposition/index", ["require", "exports", "lib/decomposition/pca"], function (require, exports, pca_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PCA = pca_1.PCA;
});
define("lib/tree/tree", ["require", "exports", "lodash", "random-js", "lib/ops/index"], function (require, exports, lodash_4, Random, ops_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    Random = __importStar(Random);
    /**
     * Question used by decision tree algorithm to determine whether to split branch or not
     * @ignore
     */
    var Question = /** @class */ (function () {
        function Question(features, column, value) {
            if (features === void 0) { features = null; }
            this.features = [];
            this.column = null;
            this.value = null;
            this.features = features;
            this.column = column;
            this.value = value;
        }
        Question.prototype.match = function (example) {
            var val = example[this.column];
            if (typeof val === 'number') {
                return val >= this.value;
            }
            else {
                return val === this.value;
            }
        };
        Question.prototype.toString = function () {
            if (!this.features) {
                throw Error('You must provide feature labels in order to render toString!');
            }
            var condition = typeof this.value === 'number' ? '>=' : '==';
            return "Is " + this.features[this.column] + " " + condition + " " + this.value;
        };
        return Question;
    }());
    exports.Question = Question;
    /**
     * According to the given targets array, count occurrences into an object.
     * @param {any[]} targets - list of class: count
     * @returns {}
     * @ignore
     */
    function classCounts(targets) {
        var result = {};
        for (var i = 0; i < targets.length; i++) {
            var target = targets[i];
            var count = result[target]; // the current
            if (typeof count === 'number' && count > 0) {
                result[target] = {
                    value: target,
                    count: count + 1
                };
            }
            else {
                result[target] = {
                    value: target,
                    count: 1
                };
            }
        }
        return result;
    }
    exports.classCounts = classCounts;
    /**
     * A leaf node that classifies data.
     * @ignore
     */
    var Leaf = /** @class */ (function () {
        function Leaf(y) {
            this.prediction = null;
            var counts = classCounts(y);
            var keys = Object.keys(counts); // Retrieving the keys for looping
            // Variable holders
            var maxCount = 0;
            var maxValue = null;
            // Finding the max count key(actual prediction value)
            for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                var count = counts[key].count;
                var value = counts[key].value;
                if (count > maxCount) {
                    maxValue = value;
                    maxCount = count;
                }
            }
            this.prediction = maxValue;
        }
        return Leaf;
    }());
    exports.Leaf = Leaf;
    /**
     * It holds a reference to the question, and to the two children nodes
     * @ignore
     */
    var DecisionNode = /** @class */ (function () {
        function DecisionNode(question, trueBranch, falseBranch) {
            this.question = null;
            this.trueBranch = null;
            this.falseBranch = null;
            this.question = question;
            this.trueBranch = trueBranch;
            this.falseBranch = falseBranch;
        }
        return DecisionNode;
    }());
    exports.DecisionNode = DecisionNode;
    /**
     * A decision tree classifier.
     *
     * @example
     * import { DecisionTreeClassifier } from 'machinelearn/tree';
     * const features = ['color', 'diameter', 'label'];
     * const decision = new DecisionTreeClassifier({ featureLabels: features });
     *
     * const X = [['Green', 3], ['Yellow', 3], ['Red', 1], ['Red', 1], ['Yellow', 3]];
     * const y = ['Apple', 'Apple', 'Grape', 'Grape', 'Lemon'];
     * decision.fit({ X, y });
     * decision.printTree(); // try it out yourself! =)
     *
     * decision.predict({ X: [['Green', 3]] }); // [ 'Apple' ]
     * decision.predict({ X }); // [ [ 'Apple' ], [ 'Apple', 'Lemon' ], [ 'Grape', 'Grape' ], [ 'Grape', 'Grape' ], [ 'Apple', 'Lemon' ] ]
     *
     * @example
     * import { DecisionTreeClassifier } from 'machinelearn/tree';
     * const decision = new DecisionTreeClassifier({ featureLabels: null });
     *
     * const X = [[0, 0], [1, 1]];
     * const Y = [0, 1];
     * decision.fit({ X, y });
     * decision2.predict({ row: [[2, 2]] }); // [ 1 ]
     */
    var DecisionTreeClassifier = /** @class */ (function () {
        /**
         *
         * @param featureLabels - Literal names for each feature to be used while printing the tree out as a string
         * @param verbose - Logs the progress of the tree construction as console.info
         * @param random_state - A seed value for the random engine
         */
        function DecisionTreeClassifier(_a) {
            var _b = _a === void 0 ? {
                featureLabels: null,
                verbose: false,
                random_state: null
            } : _a, _c = _b.featureLabels, featureLabels = _c === void 0 ? null : _c, _d = _b.verbose, verbose = _d === void 0 ? false : _d, _e = _b.random_state, random_state = _e === void 0 ? null : _e;
            this.featureLabels = null;
            this.tree = null;
            this.verbose = true;
            this.randomState = null;
            this.randomEngine = null;
            this.featureLabels = featureLabels;
            this.verbose = verbose;
            this.randomState = random_state;
            if (!Number.isInteger(random_state)) {
                this.randomEngine = Random.engines.mt19937().autoSeed();
            }
            else {
                this.randomEngine = Random.engines.mt19937().seed(random_state);
            }
        }
        /**
         * Fit date, which builds a tree
         * @param {any} X - 2D Matrix of training
         * @param {any} y - 1D Vector of target
         * @returns {Leaf | DecisionNode}
         */
        DecisionTreeClassifier.prototype.fit = function (X, y) {
            if (X === void 0) { X = null; }
            if (y === void 0) { y = null; }
            ops_4.validateFitInputs(X, y);
            this.tree = this.buildTree({ X: X, y: y });
        };
        /**
         * Predict multiple rows
         *
         * @param X - 2D Matrix of testing data
         */
        DecisionTreeClassifier.prototype.predict = function (X) {
            if (X === void 0) { X = []; }
            ops_4.validateMatrix2D(X);
            var result = [];
            for (var i = 0; i < X.length; i++) {
                var row = X[i];
                result.push(this._predict({ row: row, node: this.tree }));
            }
            return result;
        };
        /**
         * Returns the model checkpoint
         * @returns {{featureLabels: string[]; tree: any; verbose: boolean}}
         */
        DecisionTreeClassifier.prototype.toJSON = function () {
            return {
                featureLabels: this.featureLabels,
                tree: this.tree,
                verbose: this.verbose,
                random_state: this.randomState
            };
        };
        /**
         * Restores the model from a checkpoint
         * @param {string[]} featureLabels - Literal names for each feature to be used while printing the tree out as a string
         * @param {any} tree - The model's state
         * @param {boolean} verbose - Logs the progress of the tree construction as console.info
         * @param {number} random_state - A seed value for the random engine
         */
        DecisionTreeClassifier.prototype.fromJSON = function (_a) {
            var _b = _a.featureLabels, featureLabels = _b === void 0 ? null : _b, _c = _a.tree, tree = _c === void 0 ? null : _c, _d = _a.verbose, verbose = _d === void 0 ? false : _d, _e = _a.random_state, random_state = _e === void 0 ? null : _e;
            this.featureLabels = featureLabels;
            this.tree = tree;
            this.verbose = verbose;
            this.randomState = random_state;
        };
        /**
         * Recursively print the tree into console
         * @param {string} spacing - Spacing used when printing the tree into the terminal
         */
        DecisionTreeClassifier.prototype.printTree = function (spacing) {
            if (spacing === void 0) { spacing = ''; }
            if (!this.tree) {
                throw new Error('You cannot print an empty tree');
            }
            this._printTree({ node: this.tree, spacing: spacing });
        };
        /**
         * Partition X and y into true and false branches
         * @param X
         * @param y
         * @param {Question} question
         * @returns {{trueX: Array<any>; trueY: Array<any>; falseX: Array<any>; falseY: Array<any>}}
         */
        DecisionTreeClassifier.prototype.partition = function (X, y, question) {
            var trueX = [];
            var trueY = [];
            var falseX = [];
            var falseY = [];
            for (var i = 0; i < X.length; i++) {
                var row = X[i];
                if (question.match(row)) {
                    trueX.push(X[i]);
                    trueY.push(y[i]);
                }
                else {
                    falseX.push(X[i]);
                    falseY.push(y[i]);
                }
            }
            return { trueX: trueX, trueY: trueY, falseX: falseX, falseY: falseY };
        };
        /**
         * Calculate the gini impurity of rows
         * Checkout: https://en.wikipedia.org/wiki/Decision_tree_learning#Gini_impurity
         * @param targets
         * @returns {number}
         */
        DecisionTreeClassifier.prototype.gini = function (targets) {
            var counts = classCounts(targets);
            var impurity = 1;
            var keys = Object.keys(counts);
            for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                var count = counts[key].count;
                if (count === null || count === undefined) {
                    throw Error('Invalid class count detected!');
                }
                var probOfClass = count / targets.length;
                impurity -= Math.pow(probOfClass, 2);
            }
            return impurity;
        };
        /**
         * Information Gain.
         *
         * The uncertainty of the starting node, minus the weighted impurity of
         * two child nodes.
         * @param left
         * @param right
         * @param uncertainty
         * @returns {number}
         */
        DecisionTreeClassifier.prototype.infoGain = function (left, right, uncertainty) {
            var p = left.length / (left.length + right.length);
            return uncertainty - p * this.gini(left) - (1 - p) * this.gini(right);
        };
        /**
         * Find the best split for the current X and y.
         * @param X
         * @param y
         * @returns {{bestGain: number; bestQuestion: any}}
         */
        DecisionTreeClassifier.prototype.findBestSplit = function (X, y) {
            var uncertainty = this.gini(y);
            var nFeatures = X[0].length;
            var bestGain = 0;
            var bestQuestion = null;
            var featureIndex = [];
            if (Number.isInteger(this.randomState)) {
                // method 1: Randomly selecting features
                while (featureIndex.length <= nFeatures) {
                    var index = Random.integer(0, nFeatures)(this.randomEngine);
                    featureIndex.push(index);
                }
            }
            else {
                featureIndex = lodash_4.range(0, X[0].length);
            }
            var _loop_3 = function (i) {
                var col = featureIndex[i];
                var uniqFeatureValues = lodash_4.uniqBy(lodash_4.map(X, function (row) { return row[col]; }), function (x) { return x; });
                for (var j = 0; j < uniqFeatureValues.length; j++) {
                    var feature = uniqFeatureValues[j];
                    // featureLabels is for the model interoperability
                    var question = new Question(this_1.featureLabels, col, feature);
                    // Try splitting the dataset
                    var _a = this_1.partition(X, y, question), trueY = _a.trueY, falseY = _a.falseY;
                    // Skip this dataset if it does not divide
                    if (trueY.length === 0 || falseY.length === 0) {
                        continue;
                    }
                    // Calculate information gained from this split
                    var gain = this_1.infoGain(trueY, falseY, uncertainty);
                    if (this_1.verbose) {
                        console.info("fn: " + col + " fval: " + feature + " gini: " + gain);
                    }
                    if (gain >= bestGain) {
                        bestGain = gain;
                        bestQuestion = question;
                    }
                }
            };
            var this_1 = this;
            for (var i = 0; i < featureIndex.length; i++) {
                _loop_3(i);
            }
            return { bestGain: bestGain, bestQuestion: bestQuestion };
        };
        /**
         * Interactively build tree until it reaches the terminal nodes
         * @param {any} X
         * @param {any} y
         * @returns {any}
         */
        DecisionTreeClassifier.prototype.buildTree = function (_a) {
            var X = _a.X, y = _a.y;
            var _b = this.findBestSplit(X, y), bestGain = _b.bestGain, bestQuestion = _b.bestQuestion;
            if (bestGain === 0) {
                return new Leaf(y);
            }
            // Partition the current passed in X ,y
            var _c = this.partition(X, y, bestQuestion), trueX = _c.trueX, trueY = _c.trueY, falseX = _c.falseX, falseY = _c.falseY;
            // Recursively build the true branch
            var trueBranch = this.buildTree({ X: trueX, y: trueY });
            // Recursively build the false branch
            var falseBranch = this.buildTree({ X: falseX, y: falseY });
            return new DecisionNode(bestQuestion, trueBranch, falseBranch);
        };
        /**
         * Internal predict method separated out for recursion purpose
         * @param {any} row
         * @param {any} node
         * @returns {any}
         * @private
         */
        DecisionTreeClassifier.prototype._predict = function (_a) {
            var row = _a.row, node = _a.node;
            if (node instanceof Leaf) {
                // Just return the highest voted
                return node.prediction;
            }
            if (node.question.match(row)) {
                return this._predict({ row: row, node: node.trueBranch });
            }
            else {
                return this._predict({ row: row, node: node.falseBranch });
            }
        };
        /**
         * Private method for printing tree; required for recursion
         * @param {any} node
         * @param {any} spacing
         */
        DecisionTreeClassifier.prototype._printTree = function (_a) {
            var node = _a.node, _b = _a.spacing, spacing = _b === void 0 ? '' : _b;
            if (node instanceof Leaf) {
                console.info(spacing + '' + node.prediction);
                return;
            }
            // Print the question of the node
            console.info(spacing + node.question.toString());
            // Call this function recursively for true branch
            console.info(spacing, '--> True');
            this._printTree({ node: node.trueBranch, spacing: spacing + ' ' });
            // Call this function recursively for false branch
            console.info(spacing, '--> False');
            this._printTree({ node: node.falseBranch, spacing: spacing + ' ' });
        };
        return DecisionTreeClassifier;
    }());
    exports.DecisionTreeClassifier = DecisionTreeClassifier;
});
define("lib/tree/index", ["require", "exports", "lib/tree/tree"], function (require, exports, tree_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DecisionTreeClassifier = tree_1.DecisionTreeClassifier;
});
define("lib/ensemble/forest", ["require", "exports", "lodash", "lib/ops/index", "lib/tree/index"], function (require, exports, lodash_5, ops_5, tree_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Base RandomForest implementation used by both classifier and regressor
     * @ignore
     */
    var BaseRandomForest = /** @class */ (function () {
        /**
         *
         * @param {number} nEstimator - Number of trees.
         * @param random_state - Random seed value for DecisionTrees
         */
        function BaseRandomForest(_a) {
            var _b = _a === void 0 ? {
                // Default value on empty constructor
                nEstimator: 10,
                random_state: null
            } : _a, 
            // Each object param default value
            _c = _b.nEstimator, 
            // Each object param default value
            nEstimator = _c === void 0 ? 10 : _c, _d = _b.random_state, random_state = _d === void 0 ? null : _d;
            this.trees = [];
            this.randomState = null;
            this.nEstimator = nEstimator;
            this.randomState = random_state;
        }
        /**
         * Build a forest of trees from the training set (X, y).
         * @param {Array} X - array-like or sparse matrix of shape = [n_samples, n_features]
         * @param {Array} y - array-like, shape = [n_samples] or [n_samples, n_outputs]
         * @returns void
         */
        BaseRandomForest.prototype.fit = function (X, y) {
            var _this = this;
            if (X === void 0) { X = null; }
            if (y === void 0) { y = null; }
            ops_5.validateFitInputs(X, y);
            this.trees = lodash_5.reduce(lodash_5.range(0, this.nEstimator), function (sum) {
                var tree = new tree_2.DecisionTreeClassifier({
                    featureLabels: null,
                    random_state: _this.randomState
                });
                tree.fit(X, y);
                return lodash_5.concat(sum, [tree]);
            }, []);
        };
        /**
         * Returning the current model's checkpoint
         * @returns {{trees: any[]}}
         */
        BaseRandomForest.prototype.toJSON = function () {
            return {
                trees: this.trees
            };
        };
        /**
         * Restore the model from a checkpoint
         * @param {any[]} trees - Decision trees
         */
        BaseRandomForest.prototype.fromJSON = function (_a) {
            var _b = _a.trees, trees = _b === void 0 ? null : _b;
            if (!trees) {
                throw new Error('You must provide both tree to restore the model');
            }
            this.trees = trees;
        };
        /**
         * Internal predict function used by either RandomForestClassifier or Regressor
         * @param X
         * @private
         */
        BaseRandomForest.prototype.predict = function (X) {
            if (X === void 0) { X = null; }
            ops_5.validateMatrix2D(X);
            return lodash_5.map(this.trees, function (tree) {
                // TODO: Check if it's a matrix or an array
                return tree.predict(X);
            });
        };
        return BaseRandomForest;
    }());
    exports.BaseRandomForest = BaseRandomForest;
    /**
     * Random forest classifier creates a set of decision trees from randomly selected subset of training set.
     * It then aggregates the votes from different decision trees to decide the final class of the test object.
     *
     * @example
     * import { RandomForestClassifier } from 'machinelearn/ensemble';
     *
     * const X = [[0, 0], [1, 1], [2, 1], [1, 5], [3, 2]];
     * const y = [0, 1, 2, 3, 7];
     *
     * const randomForest = new RandomForestClassifier();
     * randomForest.fit(X, y);
     *
     * // Results in a value such as [ '0', '2' ].
     * // Predictions will change as we have not set a seed value.
     */
    var RandomForestClassifier = /** @class */ (function (_super) {
        __extends(RandomForestClassifier, _super);
        function RandomForestClassifier() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * Predict class for X.
         *
         * The predicted class of an input sample is a vote by the trees in the forest, weighted by their probability estimates.
         * That is, the predicted class is the one with highest mean probability estimate across the trees.
         * @param {Array} X - array-like or sparse matrix of shape = [n_samples]
         * @returns {string[]}
         */
        RandomForestClassifier.prototype.predict = function (X) {
            if (X === void 0) { X = null; }
            var predictions = _super.prototype.predict.call(this, X);
            return this.votePredictions(predictions);
        };
        /**
         * @hidden
         * Bagging prediction helper method
         * According to the predictions returns by the trees, it will select the
         * class with the maximum number (votes)
         * @param {Array<any>} predictions - List of initial predictions that may look like [ [1, 2], [1, 1] ... ]
         * @returns {string[]}
         */
        RandomForestClassifier.prototype.votePredictions = function (predictions) {
            var counts = lodash_5.countBy(predictions, function (x) { return x; });
            var countsArray = lodash_5.reduce(lodash_5.keys(counts), function (sum, k) {
                var returning = {};
                returning[k] = counts[k];
                return lodash_5.concat(sum, returning);
            }, []);
            var max = lodash_5.maxBy(countsArray, function (x) { return lodash_5.head(lodash_5.values(x)); });
            var key = lodash_5.head(lodash_5.keys(max));
            // Find the actual class values from the predictions
            return lodash_5.find(predictions, function (pred) {
                return lodash_5.isEqual(pred.join(','), key);
            });
        };
        return RandomForestClassifier;
    }(BaseRandomForest));
    exports.RandomForestClassifier = RandomForestClassifier;
});
define("lib/ensemble/index", ["require", "exports", "lib/ensemble/forest"], function (require, exports, forest_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RandomForestClassifier = forest_1.RandomForestClassifier;
});
define("lib/utils/nlp", ["require", "exports", "lodash"], function (require, exports, lodash_6) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @ignore
     */
    var WordTokenizer = /** @class */ (function () {
        function WordTokenizer() {
        }
        /**
         * Tokenize a given text
         * e.g.
         * given: "deep-learning ian good fellow learning jason shin shin"
         * returns: [ 'deep', 'learning', 'ian', 'good', 'fellow', 'learning', 'jason', 'shin', 'shin' ]
         * @param text
         * @returns {string[]}
         */
        WordTokenizer.prototype.tokenize = function (text) {
            if (!lodash_6.isString(text)) {
                throw new Error('Cannot process a non string value');
            }
            var regex = /[^A-Za-zА-Яа-я0-9_]+/g;
            return text.split(regex);
        };
        return WordTokenizer;
    }());
    exports.WordTokenizer = WordTokenizer;
});
define("lib/feature_extraction/stop_words", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @ignore
     * @type {Array<string>}
     */
    exports.ENGLISH_STOP_WORDS = [
        'a',
        'about',
        'above',
        'across',
        'after',
        'afterwards',
        'again',
        'against',
        'all',
        'almost',
        'alone',
        'along',
        'already',
        'also',
        'although',
        'always',
        'am',
        'among',
        'amongst',
        'amoungst',
        'amount',
        'an',
        'and',
        'another',
        'any',
        'anyhow',
        'anyone',
        'anything',
        'anyway',
        'anywhere',
        'are',
        'around',
        'as',
        'at',
        'back',
        'be',
        'became',
        'because',
        'become',
        'becomes',
        'becoming',
        'been',
        'before',
        'beforehand',
        'behind',
        'being',
        'below',
        'beside',
        'besides',
        'between',
        'beyond',
        'bill',
        'both',
        'bottom',
        'but',
        'by',
        'call',
        'can',
        'cannot',
        'cant',
        'co',
        'con',
        'could',
        'couldnt',
        'cry',
        'de',
        'describe',
        'detail',
        'do',
        'done',
        'down',
        'due',
        'during',
        'each',
        'eg',
        'eight',
        'either',
        'eleven',
        'else',
        'elsewhere',
        'empty',
        'enough',
        'etc',
        'even',
        'ever',
        'every',
        'everyone',
        'everything',
        'everywhere',
        'except',
        'few',
        'fifteen',
        'fifty',
        'fill',
        'find',
        'fire',
        'first',
        'five',
        'for',
        'former',
        'formerly',
        'forty',
        'found',
        'four',
        'from',
        'front',
        'full',
        'further',
        'get',
        'give',
        'go',
        'had',
        'has',
        'hasnt',
        'have',
        'he',
        'hence',
        'her',
        'here',
        'hereafter',
        'hereby',
        'herein',
        'hereupon',
        'hers',
        'herself',
        'him',
        'himself',
        'his',
        'how',
        'however',
        'hundred',
        'i',
        'ie',
        'if',
        'in',
        'inc',
        'indeed',
        'interest',
        'into',
        'is',
        'it',
        'its',
        'itself',
        'keep',
        'last',
        'latter',
        'latterly',
        'least',
        'less',
        'ltd',
        'made',
        'many',
        'may',
        'me',
        'meanwhile',
        'might',
        'mill',
        'mine',
        'more',
        'moreover',
        'most',
        'mostly',
        'move',
        'much',
        'must',
        'my',
        'myself',
        'name',
        'namely',
        'neither',
        'never',
        'nevertheless',
        'next',
        'nine',
        'no',
        'nobody',
        'none',
        'noone',
        'nor',
        'not',
        'nothing',
        'now',
        'nowhere',
        'of',
        'off',
        'often',
        'on',
        'once',
        'one',
        'only',
        'onto',
        'or',
        'other',
        'others',
        'otherwise',
        'our',
        'ours',
        'ourselves',
        'out',
        'over',
        'own',
        'part',
        'per',
        'perhaps',
        'please',
        'put',
        'rather',
        're',
        'same',
        'see',
        'seem',
        'seemed',
        'seeming',
        'seems',
        'serious',
        'several',
        'she',
        'should',
        'show',
        'side',
        'since',
        'sincere',
        'six',
        'sixty',
        'so',
        'some',
        'somehow',
        'someone',
        'something',
        'sometime',
        'sometimes',
        'somewhere',
        'still',
        'such',
        'system',
        'take',
        'ten',
        'than',
        'that',
        'the',
        'their',
        'them',
        'themselves',
        'then',
        'thence',
        'there',
        'thereafter',
        'thereby',
        'therefore',
        'therein',
        'thereupon',
        'these',
        'they',
        'thick',
        'thin',
        'third',
        'this',
        'those',
        'though',
        'three',
        'through',
        'throughout',
        'thru',
        'thus',
        'to',
        'together',
        'too',
        'top',
        'toward',
        'towards',
        'twelve',
        'twenty',
        'two',
        'un',
        'under',
        'until',
        'up',
        'upon',
        'us',
        'very',
        'via',
        'was',
        'we',
        'well',
        'were',
        'what',
        'whatever',
        'when',
        'whence',
        'whenever',
        'where',
        'whereafter',
        'whereas',
        'whereby',
        'wherein',
        'whereupon',
        'wherever',
        'whether',
        'which',
        'while',
        'whither',
        'who',
        'whoever',
        'whole',
        'whom',
        'whose',
        'why',
        'will',
        'with',
        'within',
        'without',
        'would',
        'yet',
        'you',
        'your',
        'yours',
        'yourself',
        'yourselves'
    ];
});
define("lib/feature_extraction/text", ["require", "exports", "lodash", "stopword", "lib/ops/index", "lib/utils/nlp", "lib/feature_extraction/stop_words"], function (require, exports, _, sw, ops_6, nlp_1, stop_words_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    _ = __importStar(_);
    sw = __importStar(sw);
    /**
     * The CountVectorizer provides a simple way to both tokenize a collection
     * of text documents and build a vocabulary of known words, but also
     * to encode new documents using that vocabulary.
     *
     * @example
     * import { CountVectorizer } from 'machinelearn/feature_extraction';
     *
     * const corpus = ['deep learning ian good fellow learning jason shin shin', 'yoshua bengio'];
     * const vocabCounts = cv.fit_transform(corpus);
     * console.log(vocabCounts); // [ [ 0, 1, 1, 1, 1, 1, 2, 2, 0 ], [ 1, 0, 0, 0, 0, 0, 0, 0, 1 ] ]
     * console.log(cv.vocabulary); // { bengio: 0, deep: 1, fellow: 2, good: 3, ian: 4, jason: 5, learning: 6, shin: 7, yoshua: 8 }
     * console.log(cv.getFeatureNames()); // [ 'bengio', 'deep', 'fellow', 'good', 'ian', 'jason', 'learning', 'shin', 'yoshua' ]
     *
     * const newVocabCounts = cv.transform(['ian good fellow jason duuog']);
     * console.log(newVocabCounts); // [ [ 0, 0, 1, 1, 1, 1, 0, 0, 0 ] ]
     */
    var CountVectorizer = /** @class */ (function () {
        function CountVectorizer() {
            this.vocabulary = {};
        }
        /**
         * Learn a vocabulary dictionary of all tokens in the raw documents.
         * @param {string[]} doc - An array of strings
         * @returns {CountVectorizer}
         */
        CountVectorizer.prototype.fit = function (doc) {
            if (doc === void 0) { doc = null; }
            ops_6.validateMatrix1D(doc);
            this.fit_transform(doc);
            return this;
        };
        /**
         * fit transform applies
         * @param {string[]} doc - An array of strings
         * @returns {number[][]}
         */
        CountVectorizer.prototype.fit_transform = function (doc) {
            if (doc === void 0) { doc = null; }
            ops_6.validateMatrix1D(doc);
            var _a = this.buildVocabulary(doc), internalVocabulary = _a.internalVocabulary, pubVocabulary = _a.pubVocabulary;
            this.vocabulary = pubVocabulary;
            this.internalVocabulary = internalVocabulary;
            return this.countVocab(doc);
        };
        /**
         * Transform documents to document-term matrix.
         * Extract token counts out of raw text documents using the vocabulary
         * fitted with fit or the one provided to the constructor.
         * @param {string[]} doc - An array of strings
         * @returns {number[][]}
         */
        CountVectorizer.prototype.transform = function (doc) {
            if (doc === void 0) { doc = null; }
            ops_6.validateMatrix1D(doc);
            return this.countVocab(doc);
        };
        /**
         * Array mapping from feature integer indices to feature name
         * @returns {Object}
         */
        CountVectorizer.prototype.getFeatureNames = function () {
            if (!this.internalVocabulary) {
                throw new Error('You must fit a document first before you can retrieve the feature names!');
            }
            return this.internalVocabulary;
        };
        /**
         * Build a tokenizer/vectorizer
         * @returns {(x: string) => string[]}
         */
        CountVectorizer.prototype.buildAnalyzer = function () {
            var _this = this;
            return function (x) { return _this.preprocess(x, { removeSW: true }); };
        };
        /**
         * Calculates list of vocabularies in the entire document and come up with
         * vocab: index pairs
         * @param doc
         */
        CountVectorizer.prototype.buildVocabulary = function (doc) {
            var analyze = this.buildAnalyzer();
            var processedDoc = _.flowRight(function (d) { return _.uniq(d); }, function (d) { return _.sortBy(d, function (z) { return z; }); }, function (d) { return _.flatten(d); }, function (d) { return _.map(d, function (text) { return analyze(text); }); })(doc);
            var pubVocabulary = _.reduce(processedDoc, function (sum, val, index) {
                return _.set(sum, val, index);
            }, {});
            return {
                internalVocabulary: processedDoc,
                pubVocabulary: pubVocabulary
            };
        };
        /**
         * @ignore
         * Counting number of vocab occurences in the current token of a sentence
         * ['yoshua', 'bengio', 'deep', 'learning'] = vocabulary
         * ['yohua', 'bengio'] => tokens
         * results in
         * [1, 1, 0, 0]
         * @param doc
         */
        CountVectorizer.prototype.countVocab = function (doc) {
            var _this = this;
            var analyze = this.buildAnalyzer();
            // 1. Reducing the doc
            return _.reduce(doc, function (sum, text) {
                var tokens = analyze(text);
                // 2. Looping each vocab for counting
                var sentenceCounted = _.reduce(_this.internalVocabulary, function (sentenceCounts, vocab) {
                    // 3. Getting number of occurences of vocab in each tokens (tokens of a sentence)
                    var vocabCount = _.reduce(tokens, function (tokenCounts, t) {
                        if (_.isEqual(t, vocab)) {
                            return tokenCounts + 1;
                        }
                        else {
                            return tokenCounts;
                        }
                    }, 0);
                    return _.concat(sentenceCounts, [vocabCount]);
                }, []);
                return _.concat(sum, [sentenceCounted]);
            }, []);
        };
        /**
         * @ignore
         * preprocess a line of text by applying
         * 1) tokenization
         * 2) removing stopwords
         * @param text
         * @param {any} removeSW
         * @returns {any}
         */
        CountVectorizer.prototype.preprocess = function (text, _a) {
            var _b = _a.removeSW, removeSW = _b === void 0 ? false : _b;
            var tokenizer = new nlp_1.WordTokenizer();
            return _.flowRight(function (x) { return tokenizer.tokenize(x); }, function (x) { return x.join(' '); }, 
            // TODO: Somehow it's removing too many words??!!
            function (x) {
                return removeSW ? sw.removeStopwords(x, stop_words_1.ENGLISH_STOP_WORDS) : x;
            }, function (x) { return x.split(' '); })(text);
        };
        return CountVectorizer;
    }());
    exports.CountVectorizer = CountVectorizer;
});
define("lib/feature_extraction/index", ["require", "exports", "lib/feature_extraction/text"], function (require, exports, text_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CountVectorizer = text_1.CountVectorizer;
});
define("lib/utils/permutations", ["require", "exports", "lodash"], function (require, exports, _) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    _ = __importStar(_);
    /**
     * Generate all combination of arguments from objects
     * @param optObj - An object or arrays with keys describing options  {firstName:['Ben','Jade','Darren'],lastName:['Smith','Miller']}
     * @private
     * @return - An array of objects e.g. [{firstName:'Ben',LastName:'Smith'},{..]
     * @ignore
     */
    function _cartesianProductObj(optObj) {
        var keys = _.keys(optObj);
        var opts = _.values(optObj);
        var combs = _cartesianProductOf(opts);
        return _.map(combs, function (comb) {
            return _.zipObject(keys, comb);
        });
    }
    /**
     * Generate all combination of arguments when given arrays or strings
     * e.g. [['Ben','Jade','Darren'],['Smith','Miller']] to [['Ben','Smith'],[..]]
     * e.g. 'the','cat' to [['t', 'c'],['t', 'a'], ...]
     * @param args
     * @private
     * @ignore
     */
    function _cartesianProductOf(args) {
        var _args = args;
        if (arguments.length > 1) {
            _args = _.toArray(arguments);
        }
        // strings to arrays of letters
        _args = _.map(_args, function (opt) { return (typeof opt === 'string' ? _.toArray(opt) : opt); });
        return _.reduce(_args, function (a, b) {
            return _.flatten(_.map(a, function (x) {
                return _.map(b, function (y) {
                    return _.concat(x, [y]);
                });
            }));
        }, [[]]);
    }
    /**
     * Generate the cartesian product of input objects, arrays, or strings
     *
     *
     * product('me','hi')
     * // => [["m","h"],["m","i"],["e","h"],["e","i"]]
     *
     * product([1,2,3],['a','b','c']
     * // => [[1,"a"],[1,"b"],[1,"c"],[2,"a"],[2,"b"],[2,"c"],[3,"a"],[3,"b"],[3,"c"]]
     *
     * product({who:['me','you'],say:['hi','by']})
     * // => [{"who":"me","say":"hi"},{"who":"me","say":"by"},{"who":"you","say":"hi"},{"who":"you","say":"by"}]
     *
     * // It also takes in a single array of args
     * product(['me','hi'])
     * // => [["m","h"],["m","i"],["e","h"],["e","i"]]
     * @ignore
     */
    function product(opts) {
        if (arguments.length === 1 && !_.isArray(opts)) {
            return _cartesianProductObj(opts);
        }
        else if (arguments.length === 1) {
            return _cartesianProductOf(opts);
        }
        else {
            return _cartesianProductOf(arguments);
        }
    }
    /**
     * Generate n combinations with repeat values.
     * @param X - Matrix input
     * @param n - number of repeats
     * @ignore
     */
    function combinationsWithReplacement(X, n) {
        var _n = n;
        var _X = X;
        if (typeof _X === 'string') {
            _X = _.toArray(_X);
        }
        // If repeat is 1, simply return the original value
        if (_n === 0) {
            return null;
        }
        if (_n === 1) {
            return X;
        }
        // Falls back to X.length as default value is _n is undefined
        _n = _n ? _n : X.length;
        // make n copies of keys/indices
        var nInds = [];
        for (var j = 0; j < _n; j++) {
            nInds.push(_.keys(_X));
        }
        // get product of the indices, then filter to keep elements in order
        var arrangements = product(nInds).filter(function (pair) { return pair[0] <= pair[1]; });
        return _.map(arrangements, function (indices) { return _.map(indices, function (i) { return _X[i]; }); });
    }
    exports.combinationsWithReplacement = combinationsWithReplacement;
});
define("lib/preprocessing/data", ["require", "exports", "@tensorflow/tfjs", "lodash", "lib/ops/index", "lib/utils/MathExtra", "lib/utils/permutations"], function (require, exports, tf, _, ops_7, MathExtra_2, permutations_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    tf = __importStar(tf);
    _ = __importStar(_);
    MathExtra_2 = __importDefault(MathExtra_2);
    /**
     * Augment dataset with an additional dummy feature.
     * This is useful for fitting an intercept term with implementations which cannot otherwise fit it directly.
     *
     * @example
     * import { add_dummy_feature } from 'machinelearn/preprocessing';
     * const dummy = add_dummy_feature([[0, 1, 2], [1, 0, 3]]);
     * console.log(dummy); // returns: [ [ 1, 0, 1, 2 ], [ 1, 1, 0, 3 ] ]
     *
     * @param X - A matrix of data
     * @param value - Value to use for the dummy feature.
     */
    function add_dummy_feature(X, value) {
        if (X === void 0) { X = null; }
        if (value === void 0) { value = 1.0; }
        if (Array.isArray(X) && X.length === 0) {
            throw new TypeError('X cannot be empty');
        }
        ops_7.validateMatrix2D(X);
        var tensorX = tf.tensor2d(X);
        var _a = __read(tensorX.shape, 1), nSamples = _a[0];
        var ones = tf.ones([nSamples, 1]);
        var sValue = tf.scalar(value);
        var multipledOnes = tf.mul(ones, sValue);
        var hStacked = tf.concat([multipledOnes, tensorX], 1);
        return ops_7.reshape(Array.from(hStacked.dataSync()), hStacked.shape);
    }
    exports.add_dummy_feature = add_dummy_feature;
    /**
     * Encode categorical integer features using a one-hot aka one-of-K scheme.
     *
     * The input to this transformer should be a matrix of integers, denoting the
     * values taken on by categorical (discrete) features. The output will be a sparse
     * matrix where each column corresponds to one possible value of one feature.
     * It is assumed that input features take on values in the range [0, n_values).
     *
     * This encoding is needed for feeding categorical data to many
     * scikit-learn estimators, notably linear models and SVMs with the standard kernels.
     *
     * Note: a one-hot encoding of y labels should use a LabelBinarizer instead.
     *
     * @example
     * const enc = new OneHotEncoder();
     * const planetList = [
     *  { planet: 'mars', isGasGiant: false, value: 10 },
     *  { planet: 'saturn', isGasGiant: true, value: 20 },
     *  { planet: 'jupiter', isGasGiant: true, value: 30 }
     * ];
     * const encodeInfo = enc.encode(planetList, {
     *  dataKeys: ['value', 'isGasGiant'],
     *  labelKeys: ['planet']
     * });
     * // encodeInfo.data -> [ [ -1, 0, 1, 0, 0 ], [ 0, 1, 0, 1, 0 ], [ 1, 1, 0, 0, 1 ] ]
     * const decodedInfo = enc.decode(encodeInfo.data, encodeInfo.decoders);
     * // gives you back the original value, which is `planetList`
     */
    var OneHotEncoder = /** @class */ (function () {
        function OneHotEncoder() {
            /**
             * Calculating the sample standard deviation (vs population stddev).
             * @param lst
             * @param {number} mean
             * @returns {number}
             */
            this.calculateStd = function (lst, mean) {
                var deviations = _.map(lst, function (n) { return Math.pow(n - mean, 2); });
                return Math.pow(_.sum(deviations) / (lst.length - 1), 0.5);
            };
        }
        /**
         * encode data according to dataKeys and labelKeys
         *
         * @param data - list of records to encode
         * @param options
         */
        OneHotEncoder.prototype.encode = function (data, _a) {
            var _this = this;
            if (data === void 0) { data = null; }
            var _b = _a === void 0 ? {
                dataKeys: null,
                labelKeys: null
            } : _a, 
            /**
             * Independent variables
             */
            _c = _b.dataKeys, 
            /**
             * Independent variables
             */
            dataKeys = _c === void 0 ? null : _c, 
            /**
             * Depdenent variables
             */
            _d = _b.labelKeys, 
            /**
             * Depdenent variables
             */
            labelKeys = _d === void 0 ? null : _d;
            var decoders = [];
            // shortcut to allow caller to default to "all non-label keys are data keys"
            var _dataKeys = dataKeys ? dataKeys : _.keys(data[0]);
            // validations
            if (_.size(data) < 1) {
                throw Error('data cannot be empty!');
            }
            // data keys
            _.forEach(_dataKeys, function (dataKey) {
                // TODO: it's only checking data[0] -> It should also check all the others
                if (!_.has(data[0], dataKey)) {
                    // TODO: Find the correct error to throw
                    throw Error("Cannot find " + dataKey + " from data");
                }
            });
            // label keys
            _.forEach(labelKeys, function (labelKey) {
                // TODO: it's only checking data[0] -> It should also check all the others
                if (!_.has(data[0], labelKey)) {
                    // TODO Find the correct error to throw
                    throw Error("Cannot find " + labelKey + " from labels");
                }
            });
            // maybe a little too clever but also the simplest;
            // serialize every value for a given data key, then zip the results back up into a (possibly nested) array
            var transform = function (keys) {
                return _.zip.apply(_, __spread(_.map(keys, function (key) {
                    var standardized = _this.standardizeField(key, data);
                    var encoded = _.get(standardized, 'encoded');
                    var decode = _.get(standardized, 'decode');
                    if (encoded && decode) {
                        // TODO: We need to prefer immutable datastructure
                        decoders.push(decode);
                        return encoded;
                    }
                    // Otherwise just return values itself
                    return standardized;
                })));
            };
            var features = transform(_dataKeys);
            var labels = transform(labelKeys);
            return {
                // zip the label data back into the feature data (to ensure label data is at the end)
                data: _.map(_.zip(features, labels), _.flattenDeep),
                decoders: decoders
            };
        };
        /**
         * Decode the encoded data back into its original format
         */
        OneHotEncoder.prototype.decode = function (encoded, decoders) {
            var _this = this;
            return _.map(encoded, function (row) { return _this.decodeRow(row, decoders); });
        };
        /**
         * Decode an encoded row back into its original format
         * @param row
         * @param decoders
         * @returns {Object}
         */
        OneHotEncoder.prototype.decodeRow = function (row, decoders) {
            var i = 0;
            var numFieldsDecoded = 0;
            var record = {};
            var getStrVal = function (X, ix, decoder) {
                var data = X.slice(ix, ix + decoder.offset);
                return decoder.lookupTable[_.indexOf(data, 1)];
            };
            var getBoolVal = function (X, ix) { return !!X[ix]; };
            var getNumbVal = function (X, ix, decoder) {
                return decoder.std * X[ix] + decoder.mean;
            };
            while (i < row.length) {
                var decoder = decoders[numFieldsDecoded++];
                if (decoder.type === 'string') {
                    record[decoder.key] = getStrVal(row, i, decoder);
                }
                else if (decoder.type === 'number') {
                    record[decoder.key] = getNumbVal(row, i, decoder);
                }
                else if (decoder.type === 'boolean') {
                    record[decoder.key] = getBoolVal(row, i);
                }
                else {
                    record[decoder.key] = row[i];
                }
                // record[decoder.key] = getValue(row, i, decoder);
                i += decoder.offset ? decoder.offset : 1;
            }
            return record;
        };
        /**
         * Standardizing field
         * Example dataset:
         * [ { planet: 'mars', isGasGiant: false, value: 10 },
         * { planet: 'saturn', isGasGiant: true, value: 20 },
         * { planet: 'jupiter', isGasGiant: true, value: 30 } ]
         *
         * @param key: each key/feature such as planet, isGasGiant and value
         * @param data: the entire dataset
         * @returns {any}
         */
        OneHotEncoder.prototype.standardizeField = function (key, data) {
            var type = typeof data[0][key];
            var values = _.map(data, key);
            switch (type) {
                case 'string': {
                    var result = this.buildStringOneHot(type, key, values);
                    return {
                        decode: result.decode,
                        encoded: result.encoded
                    };
                }
                case 'number': {
                    // Apply std to values if type is number
                    // standardize: ((n - mean)/std)
                    // TODO: add support for scaling to [0, 1]
                    var result = this.buildNumberOneHot(type, key, values);
                    return {
                        decode: result.decode,
                        encoded: result.encoded
                    };
                }
                case 'boolean': {
                    // True == 1
                    // False == 0
                    var result = this.buildBooleanOneHot(type, key, values);
                    return {
                        decode: result.decode,
                        encoded: result.encoded
                    };
                }
                default:
                    return values;
            }
        };
        /**
         * One hot encode a number value
         *
         * @param type
         * @param key
         * @param values
         * @returns {{encoded: any[]; decode: {type: any; mean: number; std: number; key: any}}}
         */
        OneHotEncoder.prototype.buildNumberOneHot = function (type, key, values) {
            var mean = _.mean(values);
            var std = this.calculateStd(values, mean);
            return {
                decode: { type: type, mean: mean, std: std, key: key },
                encoded: _.map(values, function (value) { return (value - mean) / std; })
            };
        };
        /**
         * One hot encode a boolean value
         *
         * Example usage:
         * boolEncoder.encode(true) => 1
         * boolEncoder.encode(false) => 0
         *
         * @param type
         * @param key
         * @param values
         * @returns {{encode}}
         */
        OneHotEncoder.prototype.buildBooleanOneHot = function (type, key, values) {
            return {
                decode: { type: type, key: key },
                encoded: _.map(values, function (value) { return (value ? 1 : 0); })
            };
        };
        /**
         * One hot encode a string value
         *
         * Example for internal reference (unnecessary details for those just using this module)
         *
         * const encoder = buildOneHot(['RAIN', 'RAIN', 'SUN'])
         * // encoder == { encode: () => ... , lookupTable: ['RAIN', 'SUN'] }
         * encoder.encode('SUN')  // [0, 1]
         * encoder.encode('RAIN') // [1, 0]
         * encoder.encode('SUN')  // [1, 0]
         * // encoder.lookupTable can then be passed into this.decode to translate [0, 1] back into 'SUN'
         *
         * It's not ideal (ideally it would all just be done in-memory and we could return a "decode" closure,
         * but it needs to be serializable to plain old JSON.
         */
        OneHotEncoder.prototype.buildStringOneHot = function (type, key, values) {
            var lookup = {};
            var i = 0;
            var lookupTable = _.map(_.uniq(values), function (value) {
                _.set(lookup, value, i++);
                return value;
            });
            var encoded = _.map(values, function (value) {
                return _.range(0, i).map(function (pos) { return (_.get(lookup, value) === pos ? 1 : 0); });
            });
            return {
                decode: {
                    key: key,
                    lookupTable: lookupTable,
                    offset: encoded[0].length,
                    type: type
                },
                encoded: encoded
            };
        };
        return OneHotEncoder;
    }());
    exports.OneHotEncoder = OneHotEncoder;
    /**
     * Transforms features by scaling each feature to a given range.
     *
     * This estimator scales and translates each feature individually such that it is in the given range on the training set, i.e. between zero and one.
     *
     * The transformation is given by:
     *
     * ```
     * X_std = (X - X.min(axis=0)) / (X.max(axis=0) - X.min(axis=0))
     * X_scaled = X_std * (max - min) + min
     * ```
     *
     * where min, max = feature_range.
     *
     * This transformation is often used as an alternative to zero mean, unit variance scaling.
     *
     * @example
     * import { MinMaxScaler } from 'machinelearn/preprocessing';
     *
     * const minmaxScaler = new MinMaxScaler({ featureRange: [0, 1] });
     *
     * // Fitting an 1D matrix
     * minmaxScaler.fit([4, 5, 6]);
     * const result = minmaxScaler.transform([4, 5, 6]);
     * // result = [ 0, 0.5, 1 ]
     *
     * // Fitting a 2D matrix
     * const minmaxScaler2 = new MinMaxScaler({ featureRange: [0, 1] });
     * minmaxScaler2.fit([[1, 2, 3], [4, 5, 6]]);
     * const result2 = minmaxScaler2.transform([[1, 2, 3]]);
     * // result2 = [ [ 0, 0.2, 0.4000000000000001 ] ]
     *
     */
    var MinMaxScaler = /** @class */ (function () {
        /**
         * @param featureRange - scaling range
         */
        function MinMaxScaler(_a) {
            var _b = (_a === void 0 ? {
                featureRange: [0, 1]
            } : _a).featureRange, featureRange = _b === void 0 ? [0, 1] : _b;
            this.featureRange = featureRange;
        }
        /**
         * Compute the minimum and maximum to be used for later scaling.
         * @param {number[]} X - Array or sparse-matrix data input
         */
        MinMaxScaler.prototype.fit = function (X) {
            if (X === void 0) { X = null; }
            var rowMax = tf.tensor(X);
            var rowMin = tf.tensor(X);
            var xShape = ops_7.inferShape(X);
            // If input is a Matrix...
            if (xShape.length === 0 || xShape[0] === 0) {
                throw new TypeError('Cannot fit with an empty value');
            }
            else if (xShape.length === 2) {
                rowMax = tf.max(rowMax, 0);
                rowMin = tf.min(rowMin, 0);
            }
            this.dataMax = tf.max(rowMax).dataSync()[0];
            this.dataMin = tf.min(rowMin).dataSync()[0];
            this.featureMax = this.featureRange[1];
            this.featureMin = this.featureRange[0];
            // const zz = zzdataMax - zzdataMin;
            this.dataRange = this.dataMax - this.dataMin;
            // We need different data range for multi-dimensional
            this.scale = (this.featureMax - this.featureMin) / this.dataRange;
            this.baseMin = this.featureMin - this.dataMin * this.scale;
        };
        /**
         * Fit to data, then transform it.
         * @param X - Original input vector
         */
        MinMaxScaler.prototype.fit_transform = function (X) {
            this.fit(X);
            return this.transform(X);
        };
        /**
         * Scaling features of X according to feature_range.
         * @param X - Original input vector
         */
        MinMaxScaler.prototype.transform = function (X) {
            var _this = this;
            if (X === void 0) { X = null; }
            // Transforms a single vector
            var transform_single = function (_X) {
                var X1 = _X.map(function (x) { return x * _this.scale; });
                return X1.map(function (x) { return x + _this.baseMin; });
            };
            var shapes = ops_7.inferShape(X);
            if (shapes.length === 2) {
                return X.map(function (z) { return transform_single(z); });
            }
            else if (shapes.length === 1) {
                return transform_single(X);
            }
            else {
                throw new TypeError("The input shape " + JSON.stringify(shapes) + " cannot be transformed");
            }
        };
        /**
         * Undo the scaling of X according to feature_range.
         * @param {number[]} X - Scaled input vector
         */
        MinMaxScaler.prototype.inverse_transform = function (X) {
            var _this = this;
            if (X === void 0) { X = null; }
            ops_7.validateMatrix1D(X);
            var X1 = X.map(function (x) { return x - _this.baseMin; });
            return X1.map(function (x) { return x / _this.scale; });
        };
        return MinMaxScaler;
    }());
    exports.MinMaxScaler = MinMaxScaler;
    /**
     * Binarizer transform your data using a binary threshold.
     * All values above the threshold are marked 1 and all equal to or below are marked as 0.
     *
     * It can also be used as a pre-processing step for estimators that consider
     * boolean random variables (e.g. modelled using the Bernoulli distribution in
     * a Bayesian setting).
     *
     * @example
     * import { Binarizer } from 'machinelearn/preprocessing';
     *
     * const binX = [[1, -1, 2], [2, 0, 0], [0, 1, -1]];
     * const binarizer = new Binarizer({ threshold: 0 });
     * const result = binarizer.transform(binX);
     * // [ [ 1, 0, 1 ], [ 1, 0, 0 ], [ 0, 1, 0 ] ]
     */
    var Binarizer = /** @class */ (function () {
        /**
         *
         * @param {number} threshold - Feature values below or equal to this are replaced by 0, above it by 1.
         * @param {boolean} copy - Flag to clone the input value.
         */
        function Binarizer(_a) {
            var _b = _a === void 0 ? {
                // Default value on empty constructor
                copy: true,
                threshold: 0
            } : _a, 
            // Each object param default value
            _c = _b.copy, 
            // Each object param default value
            copy = _c === void 0 ? true : _c, _d = _b.threshold, threshold = _d === void 0 ? 0 : _d;
            this.threshold = threshold;
            this.copy = copy;
        }
        /**
         * Currently fit does nothing
         * @param {any[]} X - Does nothing
         */
        Binarizer.prototype.fit = function (X) {
            if (X === void 0) { X = null; }
            if (Array.isArray(X) && X.length === 0) {
                throw new TypeError('X cannot be empty');
            }
            ops_7.validateMatrix2D(X);
            console.info("Currently Bianrizer's fit is designed to do nothing");
        };
        /**
         * Transforms matrix into binarized form
         * X = [[ 1., -1.,  2.],
         *      [ 2.,  0.,  0.],
         *      [ 0.,  1., -1.]]
         * becomes
         * array([[ 1.,  0.,  1.],
         *    [ 1.,  0.,  0.],
         *    [ 0.,  1.,  0.]])
         * @param {any[]} X - The data to binarize.
         */
        Binarizer.prototype.transform = function (X) {
            if (X === void 0) { X = null; }
            var _X = this.copy ? _.clone(X) : X;
            if (Array.isArray(_X) && _X.length === 0) {
                throw new TypeError('X cannot be empty');
            }
            ops_7.validateMatrix2D(_X);
            for (var row = 0; row < _.size(X); row++) {
                var rowValue = _.get(X, "[" + row + "]");
                for (var column = 0; column < _.size(rowValue); column++) {
                    var item = _.get(X, "[" + row + "][" + column + "]");
                    // Type checking item; It must be a number type
                    if (!_.isNumber(item)) {
                        throw new Error("Value " + item + " is not a number");
                    }
                    // If current item is less than
                    _X[row][column] = item <= this.threshold ? 0 : 1;
                }
            }
            return _X;
        };
        return Binarizer;
    }());
    exports.Binarizer = Binarizer;
    /**
     * Generate polynomial and interaction features.
     *
     * Generate a new feature matrix consisting of all polynomial combinations of the features
     * with degree less than or equal to the specified degree. For example, if an input sample
     * is two dimensional and of the form [a, b], the degree-2 polynomial features are [1, a, b, a^2, ab, b^2].
     *
     * @example
     * import { PolynomialFeatures } from 'machinelearn/preprocessing';
     * const poly = new PolynomialFeatures();
     * const X = [[0, 1], [2, 3], [4, 5]];
     * poly.transform(X);
     * // Result:
     * // [ [ 1, 0, 1, 0, 0, 1 ],
     * // [ 1, 2, 3, 4, 6, 9 ],
     * // [ 1, 4, 5, 16, 20, 25 ] ]
     *
     */
    var PolynomialFeatures = /** @class */ (function () {
        /**
         *
         * @param degree - The degree of the polynomial features. Default = 2.
         */
        function PolynomialFeatures(_a) {
            var _b = (_a === void 0 ? {
                degree: 2
            } : _a).degree, degree = _b === void 0 ? 2 : _b;
            // Constructor variables validation
            if (!Number.isInteger(degree)) {
                throw new Error('Degree must be a number');
            }
            this.degree = degree;
        }
        /**
         * Transforms the input data
         * @param X - a matrix
         */
        PolynomialFeatures.prototype.transform = function (X) {
            if (X === void 0) { X = null; }
            if (Array.isArray(X) && X.length === 0) {
                throw new TypeError('X cannot be empty');
            }
            ops_7.validateMatrix2D(X);
            var matrix = tf.tensor2d(X);
            var _a = __read(matrix.shape, 2), nSamples = _a[0], nFeatures = _a[1];
            var indexCombination = this.indexCombination(nFeatures, this.degree);
            var nOutputFeatures = indexCombination.length;
            // Polynomial feature extraction loop begins
            var tfOnes = tf.ones([nSamples, nOutputFeatures]);
            var result = ops_7.reshape(Array.from(tfOnes.dataSync()), tfOnes.shape);
            var rowRange = _.range(0, X.length);
            for (var i = 0; i < indexCombination.length; i++) {
                var c = indexCombination[i];
                var colsRange = Array.isArray(c) ? c : [c];
                // Retrieves column values from X using the index of the indexCombination in the loop
                var srcColValues = c !== null ? MathExtra_2.default.subset(X, rowRange, colsRange) : [];
                var xc = null;
                if (srcColValues.length === 0) {
                    xc = _.fill(rowRange.slice(), 1);
                }
                else {
                    xc = tf
                        .tensor2d(srcColValues)
                        .prod(1)
                        .dataSync();
                }
                result = MathExtra_2.default.subset(result, rowRange, [i], xc);
            }
            return result;
        };
        /**
         * Creates a combination of index according to nFeautres and degree
         * @param nFeatures
         * @param degree
         */
        PolynomialFeatures.prototype.indexCombination = function (nFeatures, degree) {
            var range = _.range(0, degree + 1);
            var combs = range.map(function (i) {
                return permutations_1.combinationsWithReplacement(_.range(nFeatures), i);
            });
            return combs.reduce(function (sum, cur) {
                return sum.concat(cur);
            }, []);
        };
        return PolynomialFeatures;
    }());
    exports.PolynomialFeatures = PolynomialFeatures;
    /**
     * Data normalization is a process of scaling dataset based on Vector Space Model, and by default, it uses L2 normalization.
     * At a higher level, the chief difference between the L1 and the L2 terms is that the L2 term is proportional
     * to the square of the  β values, while the L1 norm is proportional the absolute value of the values in  β .
     *
     * @example
     * import { normalize } from 'machinelearn/preprocessing';
     *
     * const result = normalize([
     *   [1, -1, 2],
     *   [2, 0, 0],
     *   [0, 1, -1],
     * ], { norm: 'l2' });
     * console.log(result);
     * // [ [ 0.4082482904638631, -0.4082482904638631, 0.8164965809277261 ],
     * // [ 1, 0, 0 ],
     * // [ 0, 0.7071067811865475, -0.7071067811865475 ] ]
     *
     * @param X - The data to normalize
     * @param norm - The norm to use to normalize each non zero sample; can be either 'l1' or 'l2'
     * @return number[][]
     */
    function normalize(X, _a) {
        if (X === void 0) { X = null; }
        var _b = (_a === void 0 ? {
            norm: 'l2'
        } : _a).norm, norm = _b === void 0 ? 'l2' : _b;
        if (Array.isArray(X) && X.length === 0) {
            throw new TypeError('X cannot be empty');
        }
        ops_7.validateMatrix2D(X);
        var normalizedMatrix = [];
        for (var i = 0; i < X.length; i++) {
            var row = X[i];
            // Adding a placeholder array
            normalizedMatrix.push([]);
            // Getting the row's square root
            var proportion = 0; // note: any because math.pow return MathType
            // Normalization proportion value
            if (norm === 'l1') {
                proportion = row.reduce(function (accum, r) { return accum + Math.abs(r); }, 0);
            }
            else if (norm === 'l2') {
                proportion = row.reduce(function (accum, r) { return accum + Math.pow(r, 2); }, 0);
                proportion = Math.sqrt(proportion);
            }
            else {
                throw new Error(norm + " is not a recognised normalization method");
            }
            // Finally applying a cubic root to the total value
            for (var k = 0; k < row.length; k++) {
                var value = row[k] / proportion;
                normalizedMatrix[i].push(value);
            }
        }
        return normalizedMatrix;
    }
    exports.normalize = normalize;
});
define("lib/preprocessing/Imputer", ["require", "exports", "lodash", "lib/ops/index", "lib/utils/MathExtra"], function (require, exports, _, ops_8, MathExtra_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    _ = __importStar(_);
    MathExtra_3 = __importDefault(MathExtra_3);
    /**
     * Imputation transformer for completing missing values.
     *
     * @example
     * import { Imputer } from 'preprocessing/Imputer';
     *
     * const testX = [[1, 2], [null, 3], [7, 6]];
     * const imp = new Imputer({ missingValues: null, axis: 0 });
     * imp.fit(testX);
     * const impResult = imp.fit_transform([[null, 2], [6, null], [7, 6]]);
     * // [ [ 4, 2 ], [ 6, 3.6666666666666665 ], [ 7, 6 ] ]
     */
    var Imputer = /** @class */ (function () {
        /**
         *
         * @param {any} missingValues - Target missing value to impute
         * @param {any} strategy - Missing value replacement strategy
         * @param {any} axis - Direction to impute
         * @param {any} copy - To clone the input value
         */
        function Imputer(_a) {
            var _b = _a.missingValues, missingValues = _b === void 0 ? null : _b, _c = _a.strategy, strategy = _c === void 0 ? 'mean' : _c, _d = _a.axis, axis = _d === void 0 ? 0 : _d, 
            // verbose = 0,
            _e = _a.copy, 
            // verbose = 0,
            copy = _e === void 0 ? false : _e;
            var _this = this;
            /**
             * Calculate array of numbers as array of mean values
             * Examples:
             * [ [ 1, 2 ], [ null, 3 ], [ 123, 3 ] ]
             * => [ 1.5, 3, 63 ]
             *
             * [ [ 1, 123 ], [ 2, 3, 3 ] ]
             * => [ 62, 2.6666666666666665 ]
             *
             * @param matrix
             * @param {string[]} steps
             */
            this.calcArrayMean = function (matrix, steps) {
                // TODO: Fix any return type
                // TODO: Fix matrix type any
                return _.reduce(steps, function (result, step) {
                    switch (step) {
                        case 'flatten':
                            return _.map(result, _.flatten);
                        case 'filter':
                            return _.map(result, 
                            // Expecting any type of matrics array
                            // TODO: implement a correct type
                            function (arr) {
                                return _.filter(arr, function (z) { return z !== _this.missingValues; });
                            });
                        case 'mean':
                            return _.map(result, _.mean);
                        default:
                            return result;
                    }
                }, matrix);
            };
            this.missingValues = missingValues;
            this.strategy = strategy;
            this.axis = axis;
            // this.verbose = verbose;
            this.copy = copy;
            this.means = [];
        }
        /**
         * Fit the imputer on X.
         * @param {any[]} X - Input data in array or sparse matrix format
         */
        Imputer.prototype.fit = function (X) {
            if (X === void 0) { X = null; }
            ops_8.validateMatrix2D(X);
            var _X = this.copy ? _.clone(X) : X;
            var rowLen = MathExtra_3.default.size(_X, 0);
            var colLen = MathExtra_3.default.size(_X, 1);
            var rowRange = MathExtra_3.default.range(0, rowLen);
            var colRange = MathExtra_3.default.range(0, colLen);
            if (this.strategy === 'mean') {
                if (this.axis === 0) {
                    var colNumbers = _.map(colRange, function (col) {
                        return MathExtra_3.default.subset(_X, rowRange, [col]);
                    });
                    this.means = this.calcArrayMean(colNumbers, [
                        'flatten',
                        'filter',
                        'mean'
                    ]);
                }
                else if (this.axis === 1) {
                    var rowNumbers = _.map(rowRange, function (row) { return _.get(_X, "[" + row + "]"); });
                    this.means = this.calcArrayMean(rowNumbers, ['filter', 'mean']);
                }
            }
            else {
                throw new Error("Unsupported strategy " + this.strategy + " was given");
            }
        };
        /**
         * Fit to data, then transform it.
         * @param {any[]} X - Input data in array or sparse matrix format
         * @returns {any[]}
         */
        Imputer.prototype.fit_transform = function (X) {
            if (X === void 0) { X = null; }
            ops_8.validateMatrix2D(X);
            var _X = _.clone(X);
            if (this.strategy === 'mean' && this.axis === 0) {
                // Mean column direction transform
                for (var row = 0; row < _.size(_X); row++) {
                    for (var col = 0; col < _.size(_X[row]); col++) {
                        var value = _X[row][col];
                        _X[row][col] = value === this.missingValues ? this.means[row] : value;
                    }
                }
            }
            else if (this.strategy === 'mean' && this.axis === 1) {
                // Mean row direction transform
                for (var row = 0; row < _.size(_X); row++) {
                    for (var col = 0; col < _.size(_X[row]); col++) {
                        var value = _X[row][col];
                        _X[row][col] = value === this.missingValues ? this.means[col] : value;
                    }
                }
            }
            else {
                throw new Error("Unknown transformation with strategy " + this.strategy + " and axis " + this.axis);
            }
            return _X;
        };
        return Imputer;
    }());
    exports.Imputer = Imputer;
});
define("lib/preprocessing/index", ["require", "exports", "lib/preprocessing/data", "lib/preprocessing/Imputer"], function (require, exports, data_1, Imputer_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.add_dummy_feature = data_1.add_dummy_feature;
    exports.Binarizer = data_1.Binarizer;
    exports.MinMaxScaler = data_1.MinMaxScaler;
    exports.normalize = data_1.normalize;
    exports.OneHotEncoder = data_1.OneHotEncoder;
    exports.PolynomialFeatures = data_1.PolynomialFeatures;
    exports.Imputer = Imputer_1.Imputer;
});
define("lib/linear_model/stochastic_gradient", ["require", "exports", "@tensorflow/tfjs", "lodash", "random-js", "lib/ops/index"], function (require, exports, tf, lodash_7, Random, ops_9) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    tf = __importStar(tf);
    Random = __importStar(Random);
    var TypeLoss;
    (function (TypeLoss) {
        TypeLoss["L1"] = "L1";
        TypeLoss["L2"] = "L2";
        TypeLoss["L1L2"] = "L1L2";
    })(TypeLoss = exports.TypeLoss || (exports.TypeLoss = {}));
    /**
     * Ordinary base class for SGD classier or regressor
     * @ignore
     */
    var BaseSGD = /** @class */ (function () {
        /**
         * @param preprocess - preprocess methodology can be either minmax or null. Default is minmax.
         * @param learning_rate - Used to limit the amount each coefficient is corrected each time it is updated.
         * @param epochs - Number of iterations.
         * @param clone - To clone the passed in dataset.
         */
        function BaseSGD(_a) {
            var _b = _a === void 0 ? {
                learning_rate: 0.0001,
                epochs: 10000,
                clone: true,
                random_state: null,
                loss: TypeLoss.L2,
                reg_factor: null
            } : _a, _c = _b.learning_rate, learning_rate = _c === void 0 ? 0.0001 : _c, _d = _b.epochs, epochs = _d === void 0 ? 10000 : _d, _e = _b.clone, clone = _e === void 0 ? true : _e, _f = _b.random_state, random_state = _f === void 0 ? null : _f, _g = _b.loss, loss = _g === void 0 ? TypeLoss.L2 : _g, _h = _b.reg_factor, reg_factor = _h === void 0 ? null : _h;
            this.clone = true;
            this.weights = null;
            this.learningRate = learning_rate;
            this.epochs = epochs;
            this.clone = clone;
            this.randomState = random_state;
            this.loss = loss;
            this.regFactor = reg_factor;
            // Setting a loss function according to the input option
            if (this.loss === TypeLoss.L1 && this.regFactor) {
                this.loss = tf.regularizers.l1({
                    l1: this.regFactor.l1
                });
            }
            else if (this.loss === TypeLoss.L1L2 && this.regFactor) {
                this.loss = tf.regularizers.l1l2({
                    l1: this.regFactor.l1,
                    l2: this.regFactor.l2
                });
            }
            else if (this.loss === TypeLoss.L2 && this.regFactor) {
                this.loss = tf.regularizers.l2({
                    l2: this.regFactor.l2
                });
            }
            else {
                this.loss = tf.regularizers.l2();
            }
            // Random Engine
            if (Number.isInteger(this.randomState)) {
                this.randomEngine = Random.engines.mt19937().seed(this.randomState);
            }
            else {
                this.randomEngine = Random.engines.mt19937().autoSeed();
            }
        }
        /**
         * Train the base SGD
         * @param X - Matrix of data
         * @param y - Matrix of targets
         */
        BaseSGD.prototype.fit = function (X, y) {
            if (X === void 0) { X = null; }
            if (y === void 0) { y = null; }
            ops_9.validateFitInputs(X, y);
            // holds all the preprocessed X values
            // Clone according to the clone flag
            var clonedX = this.clone ? lodash_7.cloneDeep(X) : X;
            var clonedY = this.clone ? lodash_7.cloneDeep(y) : y;
            this.sgd(clonedX, clonedY);
        };
        /**
         * Save the model's checkpoint
         */
        BaseSGD.prototype.toJSON = function () {
            return {
                learning_rate: this.learningRate,
                epochs: this.epochs,
                weights: __spread(this.weights.dataSync()),
                random_state: this.randomState
            };
        };
        /**
         * Restore the model from a checkpoint
         * @param learning_rate - Training learning rate
         * @param epochs - Number of model's training epochs
         * @param weights - Model's training state
         * @param random_state - Static random state for the model initialization
         */
        BaseSGD.prototype.fromJSON = function (_a) {
            var _b = _a === void 0 ? {
                learning_rate: 0.0001,
                epochs: 10000,
                weights: [],
                random_state: null
            } : _a, _c = _b.learning_rate, learning_rate = _c === void 0 ? 0.0001 : _c, _d = _b.epochs, epochs = _d === void 0 ? 10000 : _d, _e = _b.weights, weights = _e === void 0 ? [] : _e, _f = _b.random_state, random_state = _f === void 0 ? null : _f;
            this.learningRate = learning_rate;
            this.epochs = epochs;
            this.weights = tf.tensor(weights);
            this.randomState = random_state;
        };
        /**
         * Predictions according to the passed in test set
         * @param X - Matrix of data
         */
        BaseSGD.prototype.predict = function (X) {
            if (X === void 0) { X = null; }
            ops_9.validateMatrix2D(X);
            // Adding bias
            var biasX = this.addBias(X);
            var tensorX = tf.tensor(biasX);
            var yPred = tensorX.dot(this.weights);
            return __spread(yPred.dataSync());
        };
        /**
         * Initialize weights based on the number of features
         *
         * @example
         * initializeWeights(3);
         * // this.w = [-0.213981293, 0.12938219, 0.34875439]
         *
         * @param nFeatures
         */
        BaseSGD.prototype.initializeWeights = function (nFeatures) {
            var _this = this;
            var limit = 1 / Math.sqrt(nFeatures);
            var distribution = Random.real(-limit, limit);
            var getRand = function () { return distribution(_this.randomEngine); };
            this.weights = tf.tensor1d(lodash_7.range(0, nFeatures).map(function () { return getRand(); }));
        };
        /**
         * Adding bias to a given array
         *
         * @example
         * addBias([[1, 2], [3, 4]], 1);
         * // [[1, 1, 2], [1, 3, 4]]
         *
         * @param X
         * @param bias
         */
        BaseSGD.prototype.addBias = function (X, bias) {
            if (bias === void 0) { bias = 1; }
            // TODO: Is there a TF way to achieve it?
            return X.reduce(function (sum, cur) {
                sum.push([bias].concat(cur));
                return sum;
            }, []);
        };
        /**
         * SGD based on linear model to calculate coefficient
         * @param X - training data
         * @param y - target data
         */
        BaseSGD.prototype.sgd = function (X, y) {
            var tensorX = tf.tensor2d(this.addBias(X));
            this.initializeWeights(tensorX.shape[1]);
            var tensorY = tf.tensor1d(y);
            var tensorLR = tf.tensor(this.learningRate);
            for (var e = 0; e < this.epochs; e++) {
                var yPred = tensorX.dot(this.weights);
                var gradW = tensorY
                    .sub(yPred)
                    .neg()
                    .dot(tensorX)
                    .add(this.loss.apply(this.weights));
                this.weights = this.weights.sub(tensorLR.mul(gradW));
            }
        };
        return BaseSGD;
    }());
    exports.BaseSGD = BaseSGD;
    /**
     * Linear classifiers (SVM, logistic regression, a.o.) with SGD training.
     *
     * This estimator implements regularized linear models with
     * stochastic gradient descent (SGD) learning: the gradient of
     * the loss is estimated each sample at a time and the model is
     * updated along the way with a decreasing strength schedule
     * (aka learning rate). SGD allows minibatch (online/out-of-core)
     * learning, see the partial_fit method. For best results using
     * the default learning rate schedule, the data should have zero mean
     * and unit variance.
     *
     * @example
     * import { SGDClassifier } from 'machinelearn/linear_model';
     * const clf = new SGDClassifier();
     * const X = [[0., 0.], [1., 1.]];
     * const y = [0, 1];
     * clf.fit(X ,y);
     * clf.predict([[2., 2.]]); // result: [ 1 ]
     *
     */
    var SGDClassifier = /** @class */ (function (_super) {
        __extends(SGDClassifier, _super);
        function SGDClassifier() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * Predicted values with Math.round applied
         * @param X - Matrix of data
         */
        SGDClassifier.prototype.predict = function (X) {
            if (X === void 0) { X = null; }
            var results = _super.prototype.predict.call(this, X);
            return results.map(function (x) { return Math.round(x); });
        };
        return SGDClassifier;
    }(BaseSGD));
    exports.SGDClassifier = SGDClassifier;
    /**
     * Linear model fitted by minimizing a regularized empirical loss with SGD
     * SGD stands for Stochastic Gradient Descent: the gradient of the loss
     * is estimated each sample at a time and the model is updated along
     * the way with a decreasing strength schedule (aka learning rate).
     *
     * @example
     * import { SGDRegressor } from 'machinelearn/linear_model';
     * const reg = new SGDRegressor();
     * const X = [[0., 0.], [1., 1.]];
     * const y = [0, 1];
     * reg.fit(X, y);
     * reg.predict([[2., 2.]]); // result: [ 1.281828588248001 ]
     *
     */
    var SGDRegressor = /** @class */ (function (_super) {
        __extends(SGDRegressor, _super);
        function SGDRegressor() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * Predicted values
         * @param X - Matrix of data
         */
        SGDRegressor.prototype.predict = function (X) {
            if (X === void 0) { X = null; }
            return _super.prototype.predict.call(this, X);
        };
        return SGDRegressor;
    }(BaseSGD));
    exports.SGDRegressor = SGDRegressor;
});
define("lib/linear_model/coordinate_descent", ["require", "exports", "lib/preprocessing/index", "lib/linear_model/stochastic_gradient"], function (require, exports, preprocessing_1, stochastic_gradient_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Linear least squares with l2 regularization.
     *
     * Mizimizes the objective function:
     *
     *
     * ||y - Xw||^2_2 + alpha * ||w||^2_2
     *
     *
     * This model solves a regression model where the loss function is the linear least squares function
     * and regularization is given by the l2-norm. Also known as Ridge Regression or Tikhonov regularization.
     * This estimator has built-in support for multi-variate regression (i.e., when y is a 2d-array of shape [n_samples, n_targets]).
     *
     * @example
     * import { Iris } from 'machinelearn/datasets';
     * import { Ridge } from 'machinelearn/linear_model';
     * (async function() {
     *   const irisData = new Iris();
     *   const {
     *     data,         // returns the iris data (X)
     *     targets,      // list of target values (y)
     *   } = await irisData.load(); // loads the data internally
     *
     *   const reg = new Ridge({ l2: 1 });
     *   reg.fit(data, target);
     *   reg.predict([[5.1,3.5,1.4,0.2]]);
     * })();
     *
     */
    var Ridge = /** @class */ (function (_super) {
        __extends(Ridge, _super);
        /**
         * @param l2 - Regularizer factor
         * @param epochs - Number of epochs
         * @param learning_rate - learning rate
         */
        function Ridge(_a) {
            var _b = _a === void 0 ? {
                l2: null,
                epochs: 1000,
                learning_rate: 0.001
            } : _a, _c = _b.l2, l2 = _c === void 0 ? null : _c, _d = _b.epochs, epochs = _d === void 0 ? 1000 : _d, _e = _b.learning_rate, learning_rate = _e === void 0 ? 0.001 : _e;
            var _this = this;
            if (l2 === null) {
                throw TypeError('Ridge cannot be initiated with null l2');
            }
            _this = _super.call(this, {
                reg_factor: { l2: l2 },
                learning_rate: learning_rate,
                epochs: epochs,
                loss: stochastic_gradient_1.TypeLoss.L2.toString()
            }) || this;
            return _this;
        }
        return Ridge;
    }(stochastic_gradient_1.SGDRegressor));
    exports.Ridge = Ridge;
    /**
     * Linear Model trained with L1 prior as regularizer (aka the Lasso)
     *
     * The optimization objective for Lasso is:
     *
     * (1 / (2 * n_samples)) * ||y - Xw||^2_2 + alpha * ||w||_1
     *
     * Technically the Lasso model is optimizing the same objective function as the Elastic Net with l1_ratio value (no L2 penalty).
     *
     * @example
     * import { Iris } from 'machinelearn/datasets';
     * import { Lasso } from 'machinelearn/linear_model';
     * (async function() {
     *   const irisData = new Iris();
     *   const {
     *     data,         // returns the iris data (X)
     *     targets,      // list of target values (y)
     *   } = await irisData.load(); // loads the data internally
     *
     *   const reg = new Lasso({ degree: 2, l1: 1 });
     *   reg.fit(data, target);
     *   reg.predict([[5.1,3.5,1.4,0.2]]);
     * })();
     *
     */
    var Lasso = /** @class */ (function (_super) {
        __extends(Lasso, _super);
        /**
         * @param degree - Polynomial feature extraction degree
         * @param l1 - Regularizer factor
         * @param epochs - Number of epochs
         * @param learning_rate - Learning rate
         */
        function Lasso(_a) {
            var _b = _a === void 0 ? {
                degree: null,
                l1: null,
                epochs: 1000,
                learning_rate: 0.001
            } : _a, _c = _b.degree, degree = _c === void 0 ? null : _c, l1 = _b.l1, _d = _b.epochs, epochs = _d === void 0 ? 1000 : _d, _e = _b.learning_rate, learning_rate = _e === void 0 ? 0.001 : _e;
            var _this = this;
            if (l1 === null) {
                throw TypeError('Lasso cannot be initiated with null l1');
            }
            if (degree === null) {
                throw TypeError('Lasso cannot be initiated with null degree');
            }
            _this = _super.call(this, {
                reg_factor: { l1: l1 },
                learning_rate: learning_rate,
                epochs: epochs,
                loss: stochastic_gradient_1.TypeLoss.L1.toString()
            }) || this;
            _this.degree = degree;
            return _this;
        }
        /**
         * Fit model with coordinate descent.
         * @param X - A matrix of samples
         * @param y - A vector of targets
         */
        Lasso.prototype.fit = function (X, y) {
            if (X === void 0) { X = null; }
            if (y === void 0) { y = null; }
            var polynomial = new preprocessing_1.PolynomialFeatures({ degree: this.degree });
            var newX = preprocessing_1.normalize(polynomial.transform(X));
            _super.prototype.fit.call(this, newX, y);
        };
        /**
         * Predict using the linear model
         * @param X - A matrix of test data
         */
        Lasso.prototype.predict = function (X) {
            if (X === void 0) { X = null; }
            var polynomial = new preprocessing_1.PolynomialFeatures({ degree: this.degree });
            var newX = preprocessing_1.normalize(polynomial.transform(X));
            return _super.prototype.predict.call(this, newX);
        };
        return Lasso;
    }(stochastic_gradient_1.SGDRegressor));
    exports.Lasso = Lasso;
});
define("lib/linear_model/linear_regression", ["require", "exports", "@tensorflow/tfjs", "lodash", "numeric", "lib/ops/index", "lib/utils/MathExtra"], function (require, exports, tf, lodash_8, numeric, ops_10, MathExtra_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    tf = __importStar(tf);
    numeric = __importStar(numeric);
    MathExtra_4 = __importDefault(MathExtra_4);
    /**
     * Type of Linear Regression
     * Univariate = It can handle a 1 dimensional input
     * Multivariate = It can handle a 2 dimensional input
     * @ignore
     */
    var TypeLinearReg;
    (function (TypeLinearReg) {
        TypeLinearReg["UNIVARIATE"] = "UNIVARIATE";
        TypeLinearReg["MULTIVARIATE"] = "MULTIVARIATE";
    })(TypeLinearReg = exports.TypeLinearReg || (exports.TypeLinearReg = {}));
    /**
     * Ordinary least squares Linear Regression.
     *
     * It supports both univariate and multivariate linear regressions.
     *
     * @example
     * import { LinearRegression } from './linear_regression';
     * const linearRegression = new LinearRegression();
     * const X = [1, 2, 4, 3, 5];
     * const y = [1, 3, 3, 2, 5];
     * linearRegression.fit(X, y);
     * lr.predict([1, 2]);
     * // [ 1.1999999999999995, 1.9999999999999996 ]
     *
     * const linearRegression2 = new LinearRegression();
     * const X2 = [[1, 1], [1, 2], [2, 2], [2, 3]];
     * const y2 = [1, 1, 2, 2];
     * linearRegression2.fit(X2, y2);
     * lr.predict([[1, 2]]);
     * // [1.0000001788139343]
     */
    var LinearRegression = /** @class */ (function () {
        function LinearRegression() {
            this.weights = [];
            this.type = TypeLinearReg.MULTIVARIATE;
        }
        /**
         * fit linear model
         * @param {any} X - training values
         * @param {any} y - target values
         */
        LinearRegression.prototype.fit = function (X, y) {
            if (X === void 0) { X = null; }
            if (y === void 0) { y = null; }
            var xShape = ops_10.inferShape(X);
            var yShape = ops_10.inferShape(y);
            if (xShape.length === 1 && yShape.length === 1 && xShape[0] === yShape[0]) {
                // Univariate linear regression
                this.type = TypeLinearReg.UNIVARIATE;
                this.weights = this.calculateUnivariateCoeff(X, y); // getting b0 and b1
            }
            else if (xShape.length === 2 &&
                yShape.length === 1 &&
                xShape[0] === yShape[0]) {
                this.type = TypeLinearReg.MULTIVARIATE;
                this.weights = this.calculateMultiVariateCoeff(X, y);
            }
            else {
                throw new Error("Sample(" + xShape[0] + ") and target(" + yShape[0] + ") sizes do not match");
            }
        };
        /**
         * Predict using the linear model
         * @param {number} X - Values to predict.
         * @returns {number}
         */
        LinearRegression.prototype.predict = function (X) {
            if (X === void 0) { X = null; }
            var xShape = ops_10.inferShape(X);
            if (xShape.length === 1 &&
                this.type.toString() === TypeLinearReg.UNIVARIATE.toString()) {
                return this.univariatePredict(X);
            }
            else if (xShape.length === 2 &&
                this.type.toString() === TypeLinearReg.MULTIVARIATE.toString()) {
                return this.multivariatePredict(X);
            }
            else {
                throw new TypeError("The matrix is incorrectly shaped: while X is " + xShape.length + ", type is " + this.type.toString().toLowerCase());
            }
        };
        /**
         * Get the model details in JSON format
         */
        LinearRegression.prototype.toJSON = function () {
            return {
                weights: this.weights,
                type: this.type
            };
        };
        /**
         * Restore the model from a checkpoint
         */
        LinearRegression.prototype.fromJSON = function (_a) {
            var 
            /**
             * Model's weights
             */
            _b = _a.weights, 
            /**
             * Model's weights
             */
            weights = _b === void 0 ? null : _b, 
            /**
             * Type of linear regression, it can be either UNIVARIATE or MULTIVARIATE
             */
            _c = _a.type, 
            /**
             * Type of linear regression, it can be either UNIVARIATE or MULTIVARIATE
             */
            type = _c === void 0 ? null : _c;
            if (!weights || !type) {
                throw new Error('You must provide both weights and type to restore the linear regression model');
            }
            this.weights = weights;
            this.type = type;
        };
        /**
         * Univariate prediction
         * y = b0 + b1 * X
         *
         * @param X
         */
        LinearRegression.prototype.univariatePredict = function (X) {
            if (X === void 0) { X = null; }
            var preds = [];
            for (var i = 0; i < lodash_8.size(X); i++) {
                preds.push(this.weights[0] + this.weights[1] * X[i]);
            }
            return preds;
        };
        /**
         * Multivariate prediction
         * y = (b0 * X0) + (b1 * X1) + (b2 * X2) + ....
         *
         * @param X
         */
        LinearRegression.prototype.multivariatePredict = function (X) {
            if (X === void 0) { X = null; }
            var preds = [];
            for (var i = 0; i < X.length; i++) {
                var row = X[i];
                var yPred = 0;
                for (var j = 0; j < row.length; j++) {
                    yPred += this.weights[j] * row[j];
                }
                preds.push(yPred);
            }
            return preds;
        };
        /**
         * Calculates univariate coefficients for linear regression
         * @param X - X values
         * @param y - y targets
         */
        LinearRegression.prototype.calculateUnivariateCoeff = function (X, y) {
            var xMean = tf.mean(X).dataSync();
            var yMean = tf.mean(y).dataSync();
            var b1 = MathExtra_4.default.covariance(X, xMean, y, yMean) / MathExtra_4.default.variance(X, xMean);
            var b0 = yMean - b1 * xMean;
            return this.weights.concat([b0, b1]);
        };
        /**
         * Calculate multivariate coefficients for linear regression
         * @param X
         * @param y
         */
        LinearRegression.prototype.calculateMultiVariateCoeff = function (X, y) {
            var _a = __read(tf.linalg.qr(tf.tensor2d(X)), 2), q = _a[0], r = _a[1];
            var rawR = ops_10.reshape(Array.from(r.dataSync()), r.shape);
            var weights = tf
                .tensor(numeric.inv(rawR))
                .dot(q.transpose())
                .dot(tf.tensor(y))
                .dataSync();
            return Array.from(weights);
        };
        return LinearRegression;
    }());
    exports.LinearRegression = LinearRegression;
});
define("lib/linear_model/index", ["require", "exports", "lib/linear_model/coordinate_descent", "lib/linear_model/linear_regression", "lib/linear_model/stochastic_gradient"], function (require, exports, coordinate_descent_1, linear_regression_1, stochastic_gradient_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Lasso = coordinate_descent_1.Lasso;
    exports.Ridge = coordinate_descent_1.Ridge;
    exports.LinearRegression = linear_regression_1.LinearRegression;
    exports.SGDClassifier = stochastic_gradient_2.SGDClassifier;
    exports.SGDRegressor = stochastic_gradient_2.SGDRegressor;
    exports.TypeLoss = stochastic_gradient_2.TypeLoss;
});
define("lib/utils/validation", ["require", "exports", "lodash"], function (require, exports, _) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    _ = __importStar(_);
    /**
     * Check below array conditions
     * - multiclass
     *    - e.g. [ [1, 2], [2, 3] ]
     *      Then it sets multiclass value to true
     * - isArray<boolean>
     *   If the given arr is an array then the value is true else false
     * @param arr
     * @returns {any}
     * @ignore
     */
    function checkArray(arr) {
        var result = {
            isArray: false,
            multiclass: false
        };
        // Setting isArray flag
        if (_.isArray(arr)) {
            result = _.set(result, 'isArray', true);
        }
        else {
            result = _.set(result, 'isArray', false);
        }
        // Setting multiclass flag
        var firstElm = _.get(arr, '[0]');
        if (_.isArray(firstElm)) {
            result = _.set(result, 'multiclass', true);
        }
        else {
            result = _.set(result, 'multiclass', false);
        }
        return result;
    }
    exports.checkArray = checkArray;
});
define("lib/metrics/classification", ["require", "exports", "@tensorflow/tfjs", "lodash", "lib/ops/index", "lib/utils/validation"], function (require, exports, tf, _, ops_11, validation_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    tf = __importStar(tf);
    _ = __importStar(_);
    /**
     * util function to calculate a weighted sum
     * @param {any} sampleScore
     * @param {any} normalize
     * @returns {number}
     * @ignore
     */
    function _weightedSum(_a) {
        var sampleScore = _a.sampleScore, 
        // sampleWeight = null,
        _b = _a.normalize, 
        // sampleWeight = null,
        normalize = _b === void 0 ? false : _b;
        if (normalize) {
            return _.mean(sampleScore);
        }
        else {
            return _.sum(sampleScore);
        }
    }
    /**
     * Validator for classification exceptions
     * @param y_true
     * @param y_pred
     * @param labels
     * @param options
     * @ignore
     */
    exports.validateInitialInputs = function (y_true, y_pred, labels, options) {
        if (options === void 0) { options = {}; }
        var checkMultiClass = _.get(options, 'multiclass');
        // Multiclass
        if (checkMultiClass) {
            // TODO: Multi label
            if (validation_1.checkArray(y_true).multiclass || validation_1.checkArray(y_pred).multiclass) {
                throw new Error('Multiclass is not supported yet!');
            }
        }
        // Checking nullity or empty
        if (!y_true || _.isEmpty(y_true)) {
            throw new Error('y_true cannot be null or empty');
        }
        if (!y_pred || _.isEmpty(y_pred)) {
            throw new Error('y_pred cannot be null or empty');
        }
        // Checking the size equality
        if (_.size(y_true) !== _.size(y_pred)) {
            throw new Error('y_true and y_pred are not equal in size!');
        }
        // Checking labels equal to both y_true and y_pred classes
        // Labels is optional
        if (labels) {
            var yTrueCls = _.flowRight(function (x) { return _.sortBy(x, function (y) { return y; }); }, function (x) { return _.uniq(x); })(y_true);
            var yPredCls = _.flowRight(function (x) { return _.sortBy(x, function (y) { return y; }); }, function (x) { return _.uniq(x); })(y_pred);
            var sortedLabels = _.sortBy(labels, function (x) { return x; });
            if (!_.isEqual(sortedLabels, yTrueCls) ||
                !_.isEqual(sortedLabels, yPredCls)) {
                throw new Error('Labels must match the classes');
            }
        }
    };
    /**
     * Accuracy classification score.
     *
     * In multilabel classification, this function computes subset accuracy:
     * the set of labels predicted for a sample must exactly match the corresponding set of labels in y_true.
     *
     * @example
     * import { accuracyScore } from 'machinelearn/metrics';
     *
     * const accResult = accuracyScore(
     *  [0, 1, 2, 3],
     *  [0, 2, 1, 3]
     * );
     *
     * // accuracy result: 0.5
     *
     * @param y_true - 1d array-like, or label indicator array / sparse matrix
     * @param y_pred - 1d array-like, or label indicator array / sparse matrix
     * @param normalize
     */
    function accuracyScore(y_true, y_pred, _a) {
        if (y_true === void 0) { y_true = null; }
        if (y_pred === void 0) { y_pred = null; }
        var _b = (_a === void 0 ? {
            normalize: true
        } : _a).normalize, normalize = _b === void 0 ? true : _b;
        exports.validateInitialInputs(y_true, y_pred, null, { multiclass: true });
        var yTrueRange = _.range(0, _.size(y_true));
        var normalised = _.map(yTrueRange, function (index) {
            var yTrue = y_true[index];
            var yPred = y_pred[index];
            return yTrue === yPred ? 1 : 0;
        });
        return _weightedSum({
            normalize: normalize,
            sampleScore: normalised
        });
    }
    exports.accuracyScore = accuracyScore;
    /**
     * Zero-one classification loss.
     *
     * If normalize is `true`, return the fraction of misclassifications (float),
     * else it returns the number of misclassifications (int). The best performance is 0.
     *
     * @example
     * import { zeroOneLoss } from 'machinelearn/metrics';
     *
     * const loss_zero_one_result = zeroOneLoss(
     *   [1, 2, 3, 4],
     *   [2, 2, 3, 5]
     * );
     * console.log(loss_zero_one_result); // 0.5
     *
     * @param {any} y_true - Ground truth (correct) labels.
     * @param {any} y_pred - Predicted labels, as returned by a classifier.
     * @param {any} normalize
     * @returns {number}
     */
    function zeroOneLoss(y_true, y_pred, _a) {
        if (y_true === void 0) { y_true = null; }
        if (y_pred === void 0) { y_pred = null; }
        var 
        /**
         * If False, return the number of misclassifications. Otherwise, return the fraction of misclassifications.
         */
        _b = (_a === void 0 ? {
            normalize: true
        } : _a).normalize, 
        /**
         * If False, return the number of misclassifications. Otherwise, return the fraction of misclassifications.
         */
        normalize = _b === void 0 ? true : _b;
        if (normalize) {
            return 1 - accuracyScore(y_true, y_pred);
        }
        // TODO: Fix return 0; implement when normalize === false
        return 0;
    }
    exports.zeroOneLoss = zeroOneLoss;
    /**
     * A confusion matrix is a technique for summarizing the performance of a classification algorithm.
     *
     * Classification accuracy alone can be misleading if you have an unequal number of observations in each class or if you have more than two classes in your dataset.
     *
     * Calculating a confusion matrix can give you a better idea of what your classification model is getting right and what types of errors it is making.
     *
     * @example
     * import { confusion_matrix } from 'machinelearn/metrics';
     *
     * const matrix1 = confusion_matrix([1, 2, 3], [1, 2, 3]);
     * console.log(matrix1); // [ [ 1, 0, 0 ], [ 0, 1, 0 ], [ 0, 0, 1 ] ]
     *
     * const matrix2 = confusion_matrix(
     *   ['cat', 'ant', 'cat', 'cat', 'ant', 'bird'],
     *   ['ant', 'ant', 'cat', 'cat', 'ant', 'cat']
     * );
     * console.log(matrix2); // [ [ 1, 2, 0 ], [ 2, 0, 0 ], [ 0, 1, 0 ] ]
     *
     * @param y_true - Ground truth (correct) target values.
     * @param y_pred - Estimated targets as returned by a classifier.
     * @param labels
     */
    function confusion_matrix(y_true, y_pred, _a) {
        if (y_true === void 0) { y_true = null; }
        if (y_pred === void 0) { y_pred = null; }
        var 
        /**
         * List of labels to index the matrix. This may be used to reorder or
         * select a subset of labels. If none is given, those that appear
         * at least once in y_true or y_pred are used in sorted order.
         */
        _b = (_a === void 0 ? {
            labels: null
        } : _a).labels, 
        /**
         * List of labels to index the matrix. This may be used to reorder or
         * select a subset of labels. If none is given, those that appear
         * at least once in y_true or y_pred are used in sorted order.
         */
        labels = _b === void 0 ? null : _b;
        exports.validateInitialInputs(y_true, y_pred, labels);
        // TODO: Sorting if set by options
        // TODO: classes should be based on yTrue
        var yTrueCls = _.uniqBy(y_true, function (x) { return x; });
        var yPredCls = _.uniqBy(y_pred, function (x) { return x; });
        // TODO: Issue was raisen to fix the typing: https://github.com/josdejong/mathjs/issues/1150
        var yTrueSize = _.size(yTrueCls);
        // const placeholder: any = math.zeros(_.size(yTrueCls), _.size(yTrueCls));
        var rawZeros = __spread(tf.zeros([yTrueSize, yTrueSize]).dataSync());
        var placeholder = ops_11.reshape(rawZeros, [yTrueSize, yTrueSize]);
        // Calculating the confusion matrix
        // Looping the index for y_true
        var rowRange = _.range(0, _.size(placeholder));
        _.forEach(rowRange, function (rowIndex) {
            // Looping the index for y_pred
            var colRange = _.range(0, _.size(placeholder[rowIndex]));
            _.forEach(colRange, function (colIndex) {
                // Get current target y true and y pred
                var yTargetTrueVal = yTrueCls[rowIndex];
                var yTargetPredVal = yPredCls[colIndex];
                // Looping the range of y true for pairing
                var yTrueRange = _.range(0, _.size(y_true));
                var score = _.reduce(yTrueRange, function (sum, n) {
                    var trueVal = y_true[n];
                    var predVal = y_pred[n];
                    if (_.isEqual(trueVal, yTargetTrueVal) &&
                        _.isEqual(predVal, yTargetPredVal)) {
                        return sum + 1;
                    }
                    return sum;
                }, 0);
                // Recording the score
                placeholder[rowIndex][colIndex] = score;
            });
        });
        return placeholder;
    }
    exports.confusion_matrix = confusion_matrix;
});
define("lib/metrics/regression", ["require", "exports", "@tensorflow/tfjs", "lodash", "lib/ops/index"], function (require, exports, tf, lodash_9, ops_12) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    tf = __importStar(tf);
    /**
     * Mean absolute error regression loss
     *
     * @example
     * import { mean_absolute_error } from 'machinelearn/metrics';
     * const y_true = [3, -0.5, 2, 7]
     * const y_pred = [2.5, 0.0, 2, 8]
     * mean_absolute_error(y_true, y_pred); // 0.5
     *
     * @param y_true - Ground truth (correct) target values.
     * @param y_pred - Estimated target values.
     * @param sample_weight - Sample weights.
     */
    function mean_absolute_error(y_true, y_pred, 
    // Options
    _a) {
        if (y_true === void 0) { y_true = null; }
        if (y_pred === void 0) { y_pred = null; }
        var _b = (_a === void 0 ? {
            sample_weight: null
        } : _a).sample_weight, sample_weight = _b === void 0 ? null : _b;
        var yTrueShape = ops_12.inferShape(y_true);
        var yPredShape = ops_12.inferShape(y_pred);
        // Validation 1: empty array check
        if (yTrueShape[0] === 0 || yPredShape[0] === 0) {
            throw new TypeError("y_true " + JSON.stringify(y_true) + " and y_pred " + JSON.stringify(y_pred) + " cannot be empty");
        }
        if (sample_weight !== null) {
            var weightShape = ops_12.inferShape(sample_weight);
            if (!lodash_9.isEqual(yTrueShape, weightShape)) {
                throw new TypeError("The shape of " + JSON.stringify(weightShape) + "\n       does not match with the sample size " + JSON.stringify(yTrueShape));
            }
        }
        // Validation 2: Same shape
        if (!lodash_9.isEqual(yTrueShape, yPredShape)) {
            throw new TypeError("The shapes of y_true " + JSON.stringify(yTrueShape) + " and y_pred " + JSON.stringify(yPredShape) + " should be equal");
        }
        /**
         * Compute the weighted average along the specified axis.
         *
         * @example
         * average(tf.tensor1d([1, 2, 3, 4])).dataSync(); // [2.5]
         *
         * @param X - Array containing data to be averaged. If a is not an array, a conversion is attempted.
         * @param axis - Axis along which to average a. If None, averaging is done over the flattened array.
         * @param w - An array of weights associated with the values in a. Each value in a contributes to the average according to its associated weight. The weights array can either be 1-D (in which case its length must be the size of a along the given axis) or of the same shape as a. If weights=None, then all data in a are assumed to have a weight equal to one.
         * @ignore
         */
        var average = function (X, axis, w) {
            if (axis === void 0) { axis = 0; }
            if (w === void 0) { w = null; }
            if (w !== null) {
                var wgt = tf.tensor1d(w);
                var scl = wgt.sum(axis);
                return tf
                    .mul(X, wgt)
                    .sum(axis)
                    .div(scl);
            }
            else {
                var sample_size = X.size;
                return tf.div(tf.sum(X), tf.scalar(sample_size));
            }
        };
        var output_errors = tf.abs(tf.sub(y_true, y_pred));
        var avg_errors = average(output_errors, 0, sample_weight);
        return average(avg_errors).dataSync()[0];
    }
    exports.mean_absolute_error = mean_absolute_error;
    /**
     * Mean squared error regression loss
     *
     * @example
     * import { mean_squared_error } from 'machinelearn/metrics';
     *
     * const y_true = [3, -0.5, 2, 7];
     * const y_pred = [2.5, 0.0, 2, 8];
     *
     * console.log(mean_squared_error(y_true, y_pred));
     * // result: 0.375
     *
     * const y_true1 = [[0.5, 1], [-1, 1], [7, -6]];
     * const y_pred1 = [[0, 2], [-1, 2], [8, -5]];
     *
     * console.log(mean_squared_error(y_true1, y_pred1));
     * // result: 0.7083333134651184
     *
     * @param y_true - Ground truth (correct) target values.
     * @param y_pred - Estimated target values.
     */
    function mean_squared_error(y_true, y_pred, 
    // Options
    _a) {
        if (y_true === void 0) { y_true = null; }
        if (y_pred === void 0) { y_pred = null; }
        var 
        /**
         * Sample weights.
         */
        _b = (_a === void 0 ? {
            sample_weight: null
        } : _a).sample_weight, 
        /**
         * Sample weights.
         */
        sample_weight = _b === void 0 ? null : _b;
        var yTrueShape = ops_12.inferShape(y_true);
        var yPredShape = ops_12.inferShape(y_pred);
        // Validation 1: empty array check
        if (yTrueShape[0] === 0 || yPredShape[0] === 0) {
            throw new TypeError("y_true " + JSON.stringify(y_true) + " and y_pred " + JSON.stringify(y_pred) + " cannot be empty");
        }
        // Validation 2: Same shape
        if (!lodash_9.isEqual(yTrueShape, yPredShape)) {
            throw new TypeError("Shapes of y_true " + JSON.stringify(yTrueShape) + " and y_pred " + JSON.stringify(yPredShape) + " should be equal");
        }
        return tf.losses
            .meanSquaredError(y_true, y_pred, sample_weight)
            .dataSync()[0];
    }
    exports.mean_squared_error = mean_squared_error;
});
define("lib/metrics/index", ["require", "exports", "lib/metrics/classification", "lib/metrics/regression"], function (require, exports, classification_1, regression_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.accuracyScore = classification_1.accuracyScore;
    exports.confusion_matrix = classification_1.confusion_matrix;
    exports.zeroOneLoss = classification_1.zeroOneLoss;
    exports.mean_absolute_error = regression_1.mean_absolute_error;
    exports.mean_squared_error = regression_1.mean_squared_error;
});
define("lib/model_selection/_split", ["require", "exports", "lodash", "random-js", "lib/ops/index"], function (require, exports, _, Random, ops_13) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    _ = __importStar(_);
    Random = __importStar(Random);
    /**
     * K-Folds cross-validator
     *
     * Provides train/test indices to split data in train/test sets. Split dataset into k consecutive folds (without shuffling by default).
     *
     * Each fold is then used once as a validation while the k - 1 remaining folds form the training set.
     *
     * @example
     * import { KFold } from 'machinelearn/model_selection';
     *
     * const kFold = new KFold({ k: 5 });
     * const X1 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
     * console.log(kFold.split(X1, X1));
     *
     * /* [ { trainIndex: [ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 ],
     * *  testIndex: [ 0, 1, 2, 3 ] },
     * * { trainIndex: [ 0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 ],
     * *  testIndex: [ 4, 5, 6, 7 ] },
     * * { trainIndex: [ 0, 1, 2, 3, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19 ],
     * *  testIndex: [ 8, 9, 10, 11 ] },
     * * { trainIndex: [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 19 ],
     * *  testIndex: [ 12, 13, 14, 15 ] },
     * * { trainIndex: [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 ],
     * *  testIndex: [ 16, 17, 18, 19 ] } ]
     *
     */
    var KFold = /** @class */ (function () {
        /**
         *
         * @param {any} k - Number of folds. Must be at least 2.
         * @param {any} shuffle - Whether to shuffle the data before splitting into batches.
         */
        function KFold(_a) {
            var _b = _a.k, k = _b === void 0 ? 2 : _b, _c = _a.shuffle, shuffle = _c === void 0 ? false : _c;
            if (k < 2) {
                throw Error('Number of folds cannot be less than 2');
            }
            this.k = k;
            this.shuffle = shuffle;
        }
        /**
         *
         * @param X - Training data, where n_samples is the number of samples and n_features is the number of features.
         * @param y - The target variable for supervised learning problems.
         * @returns {any[]}
         */
        KFold.prototype.split = function (X, y) {
            var _this = this;
            if (X === void 0) { X = null; }
            if (y === void 0) { y = null; }
            var xShape = ops_13.inferShape(X);
            var yShape = ops_13.inferShape(y);
            if (xShape.length > 0 && yShape.length > 0 && xShape[0] !== yShape[0]) {
                throw Error('X and y must have an identical size');
            }
            if (this.k > X.length || this.k > y.length) {
                throw Error("Cannot have number of splits k=" + this.k + " greater than the number of samples: " + _.size(X));
            }
            var binSize = _.floor(_.size(X) / this.k);
            var xRange = _.range(0, _.size(X));
            var splitRange = _.range(0, this.k);
            return _.reduce(splitRange, function (sum, index) {
                // Calculate binSizeRange according to k value. e.g. 0 -> [0,1]. 1 -> [2, 3].
                var binSizeRange = _.range(index * binSize, index * binSize + binSize);
                // X index range used for test set. It can either be shuffled e.g. [ 2, 0, 1 ] or raw value [ 0, 1, 2 ]
                var testXRange = _.flowRight(function (x) { return (_this.shuffle ? _.shuffle(x) : x); }, function () { return _.clone(xRange); })();
                // Getting testIndex according to binSizeRange from testXRange
                var testIndex = _.reduce(binSizeRange, function (xIndeces, i) {
                    return _.concat(xIndeces, [testXRange[i]]);
                }, []);
                var trainIndex = _.pullAll(_.clone(xRange), testIndex);
                return _.concat(sum, [{ trainIndex: trainIndex, testIndex: testIndex }]);
            }, []);
        };
        return KFold;
    }());
    exports.KFold = KFold;
    /**
     * Split arrays or matrices into random train and test subsets
     *
     * @example
     * import { train_test_split } from 'machinelearn/model_selection';
     *
     * const X = [[0, 1], [2, 3], [4, 5], [6, 7], [8, 9]];
     * const y = [0, 1, 2, 3, 4];
     *
     * train_test_split(X, y, {
     *   test_size: 0.33,
     *   train_size: 0.67,
     *   random_state: 42
     * });
     *
     * /*
     * * { xTest: [ [ 0, 1 ], [ 8, 9 ] ],
     * *  xTrain: [ [ 4, 5 ], [ 6, 7 ], [ 2, 3 ] ],
     * *  yTest: [ 0, 4 ],
     * *  yTrain: [ 2, 3, 1 ] }
     *
     * @param {any} X - input data
     * @param {any} y - target data
     * @param {number} test_size - size of the returning test set
     * @param {number} train_size - size of the returning training set
     * @param {number} random_state - state used to shuffle data
     * @param {boolean} clone - to clone the original data
     * @returns {{xTest: any[]; xTrain: any[]; yTest: any[]; yTrain: any[]}}
     */
    function train_test_split(X, y, _a) {
        if (X === void 0) { X = null; }
        if (y === void 0) { y = null; }
        var _b = _a === void 0 ? {
            // Default if nothing is given
            test_size: 0.25,
            train_size: 0.75,
            random_state: 0,
            clone: true
        } : _a, 
        // Arguments and their default values
        _c = _b.test_size, 
        // Arguments and their default values
        test_size = _c === void 0 ? 0.25 : _c, _d = _b.train_size, train_size = _d === void 0 ? 0.75 : _d, _e = _b.random_state, random_state = _e === void 0 ? 0 : _e, _f = _b.clone, clone = _f === void 0 ? true : _f;
        var _X = clone ? _.cloneDeep(X) : X;
        var _y = clone ? _.cloneDeep(y) : y;
        // Checking if either of these params is not array
        if (!_.isArray(_X) || !_.isArray(_y) || _X.length === 0 || _y.length === 0) {
            throw Error('X and y must be array and cannot be empty');
        }
        ops_13.validateFitInputs(_X, _y);
        // Training dataset size accoding to X
        var trainSizeLength = _.round(train_size * _X.length);
        var testSizeLength = _.round(test_size * _X.length);
        if (_.round(test_size + train_size) !== 1) {
            throw Error('Sum of test_size and train_size does not equal 1');
        }
        // Initiate Random engine
        var randomEngine = Random.engines.mt19937();
        randomEngine.seed(random_state);
        // split
        var xTrain = [];
        var yTrain = [];
        var xTest = [];
        var yTest = [];
        // Getting X_train and y_train
        while (xTrain.length < trainSizeLength && yTrain.length < trainSizeLength) {
            var index = Random.integer(0, X.length - 1)(randomEngine);
            // X_train
            xTrain.push(_X[index]);
            _X.splice(index, 1);
            // y_train
            yTrain.push(_y[index]);
            _y.splice(index, 1);
        }
        while (xTest.length < testSizeLength) {
            var index = Random.integer(0, _X.length - 1)(randomEngine);
            // X test
            xTest.push(_X[index]);
            _X.splice(index, 1);
            // y train
            yTest.push(_y[index]);
            _y.splice(index, 1);
        }
        // Filter return results
        var clean = function (items) {
            return _.filter(items, function (item) { return !_.isUndefined(item); });
        };
        return {
            xTest: clean(xTest),
            xTrain: clean(xTrain),
            yTest: clean(yTest),
            yTrain: clean(yTrain)
        };
    }
    exports.train_test_split = train_test_split;
});
define("lib/model_selection/index", ["require", "exports", "lib/model_selection/_split"], function (require, exports, _split_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.KFold = _split_1.KFold;
    exports.train_test_split = _split_1.train_test_split;
});
/* tslint:disable */
/*
 * Original code from:
 *
 * k-d Tree JavaScript - V 1.01
 *
 * https://github.com/ubilabs/kd-tree-javascript
 *
 * @author Mircea Pricop <pricop@ubilabs.net>, 2012
 * @author Martin Kleppe <kleppe@ubilabs.net>, 2012
 * @author Ubilabs http://ubilabs.net, 2012
 * @license MIT License <http://www.opensource.org/licenses/mit-license.php>
 */
define("lib/neighbors/KDTree", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @ignore
     */
    var Node = /** @class */ (function () {
        function Node(obj, dimension, parent) {
            this.obj = null;
            this.left = null;
            this.right = null;
            this.parent = null;
            this.dimension = null;
            this.obj = obj;
            this.left = null;
            this.right = null;
            this.parent = parent;
            this.dimension = dimension;
        }
        return Node;
    }());
    exports.Node = Node;
    /**
     * @ignore
     */
    var KDTree = /** @class */ (function () {
        function KDTree(points, metric) {
            this.dimensions = null;
            this.root = null;
            this.metric = null;
            // If points is not an array, assume we're loading a pre-built tree
            if (!Array.isArray(points)) {
                this.dimensions = points.dimensions;
                this.root = points;
                restoreParent(this.root);
            }
            else {
                this.dimensions = new Array(points[0].length);
                for (var i = 0; i < this.dimensions.length; i++) {
                    this.dimensions[i] = i;
                }
                this.root = buildTree(points, 0, null, this.dimensions);
            }
            this.metric = metric;
        }
        // Convert to a JSON serializable structure; this just requires removing
        // the `parent` property
        KDTree.prototype.toJSON = function () {
            var result = toJSONImpl(this.root);
            // Renamed dimensions to dimension
            result.dimension = this.dimensions;
            return result;
        };
        KDTree.prototype.nearest = function (point, maxNodes, maxDistance) {
            var metric = this.metric;
            var dimensions = this.dimensions;
            var i;
            var bestNodes = new BinaryHeap(function (e) { return -e[1]; });
            function nearestSearch(node) {
                var dimension = dimensions[node.dimension];
                var ownDistance = metric(point, node.obj);
                var linearPoint = {};
                var bestChild, linearDistance, otherChild, i;
                function saveNode(node, distance) {
                    bestNodes.push([node, distance]);
                    if (bestNodes.size() > maxNodes) {
                        bestNodes.pop();
                    }
                }
                for (i = 0; i < dimensions.length; i += 1) {
                    if (i === node.dimension) {
                        linearPoint[dimensions[i]] = point[dimensions[i]];
                    }
                    else {
                        linearPoint[dimensions[i]] = node.obj[dimensions[i]];
                    }
                }
                linearDistance = metric(linearPoint, node.obj);
                if (node.right === null && node.left === null) {
                    if (bestNodes.size() < maxNodes || ownDistance < bestNodes.peek()[1]) {
                        saveNode(node, ownDistance);
                    }
                    return;
                }
                if (node.right === null) {
                    bestChild = node.left;
                }
                else if (node.left === null) {
                    bestChild = node.right;
                }
                else {
                    if (point[dimension] < node.obj[dimension]) {
                        bestChild = node.left;
                    }
                    else {
                        bestChild = node.right;
                    }
                }
                nearestSearch(bestChild);
                if (bestNodes.size() < maxNodes || ownDistance < bestNodes.peek()[1]) {
                    saveNode(node, ownDistance);
                }
                if (bestNodes.size() < maxNodes || Math.abs(linearDistance) < bestNodes.peek()[1]) {
                    if (bestChild === node.left) {
                        otherChild = node.right;
                    }
                    else {
                        otherChild = node.left;
                    }
                    if (otherChild !== null) {
                        nearestSearch(otherChild);
                    }
                }
            }
            if (maxDistance) {
                for (i = 0; i < maxNodes; i += 1) {
                    bestNodes.push([null, maxDistance]);
                }
            }
            if (this.root) {
                nearestSearch(this.root);
            }
            var result = [];
            for (i = 0; i < Math.min(maxNodes, bestNodes.content.length); i += 1) {
                if (bestNodes.content[i][0]) {
                    result.push([bestNodes.content[i][0].obj, bestNodes.content[i][1]]);
                }
            }
            return result;
        };
        return KDTree;
    }());
    exports.default = KDTree;
    /**
     *
     * @param src
     * @returns {Node}
     * @ignore
     */
    function toJSONImpl(src) {
        var dest = new Node(src.obj, src.dimension, null);
        if (src.left)
            dest.left = toJSONImpl(src.left);
        if (src.right)
            dest.right = toJSONImpl(src.right);
        return dest;
    }
    /**
     *
     * @param points
     * @param depth
     * @param parent
     * @param dimensions
     * @returns {any}
     * @ignore
     */
    function buildTree(points, depth, parent, dimensions) {
        var dim = depth % dimensions.length;
        if (points.length === 0) {
            return null;
        }
        if (points.length === 1) {
            return new Node(points[0], dim, parent);
        }
        points.sort(function (a, b) { return a[dimensions[dim]] - b[dimensions[dim]]; });
        var median = Math.floor(points.length / 2);
        var node = new Node(points[median], dim, parent);
        node.left = buildTree(points.slice(0, median), depth + 1, node, dimensions);
        node.right = buildTree(points.slice(median + 1), depth + 1, node, dimensions);
        return node;
    }
    /**
     * @param root
     * @ignore
     */
    function restoreParent(root) {
        if (root.left) {
            root.left.parent = root;
            restoreParent(root.left);
        }
        if (root.right) {
            root.right.parent = root;
            restoreParent(root.right);
        }
    }
    // Binary heap implementation from:
    // http://eloquentjavascript.net/appendix2.html
    /**
     * @ignore
     */
    var BinaryHeap = /** @class */ (function () {
        function BinaryHeap(scoreFunction) {
            this.content = [];
            this.content = [];
            this.scoreFunction = scoreFunction;
        }
        BinaryHeap.prototype.push = function (element) {
            // Add the new element to the end of the array.
            this.content.push(element);
            // Allow it to bubble up.
            this.bubbleUp(this.content.length - 1);
        };
        BinaryHeap.prototype.pop = function () {
            // Store the first element so we can return it later.
            var result = this.content[0];
            // Get the element at the end of the array.
            var end = this.content.pop();
            // If there are any elements left, put the end element at the
            // start, and let it sink down.
            if (this.content.length > 0) {
                this.content[0] = end;
                this.sinkDown(0);
            }
            return result;
        };
        BinaryHeap.prototype.peek = function () {
            return this.content[0];
        };
        BinaryHeap.prototype.size = function () {
            return this.content.length;
        };
        BinaryHeap.prototype.bubbleUp = function (n) {
            // Fetch the element that has to be moved.
            var element = this.content[n];
            // When at 0, an element can not go up any further.
            while (n > 0) {
                // Compute the parent element's index, and fetch it.
                var parentN = Math.floor((n + 1) / 2) - 1;
                var parent_1 = this.content[parentN];
                // Swap the elements if the parent is greater.
                if (this.scoreFunction(element) < this.scoreFunction(parent_1)) {
                    this.content[parentN] = element;
                    this.content[n] = parent_1;
                    // Update 'n' to continue at the new position.
                    n = parentN;
                }
                else {
                    // Found a parent that is less, no need to move it further.
                    break;
                }
            }
        };
        BinaryHeap.prototype.sinkDown = function (n) {
            // Look up the target element and its score.
            var length = this.content.length;
            var element = this.content[n];
            var elemScore = this.scoreFunction(element);
            while (true) {
                // Compute the indices of the child elements.
                var child2N = (n + 1) * 2;
                var child1N = child2N - 1;
                // This is used to store the new position of the element,
                // if any.
                var swap = null;
                // If the first child exists (is inside the array)...
                if (child1N < length) {
                    // Look it up and compute its score.
                    var child1 = this.content[child1N];
                    var child1Score = this.scoreFunction(child1);
                    // If the score is less than our element's, we need to swap.
                    if (child1Score < elemScore) {
                        swap = child1N;
                    }
                }
                // Do the same checks for the other child.
                if (child2N < length) {
                    var child2 = this.content[child2N];
                    var child2Score = this.scoreFunction(child2);
                    if (child2Score < (swap === null ? elemScore : child1Score)) {
                        swap = child2N;
                    }
                }
                // If the element needs to be moved, swap it, and continue.
                if (swap !== null) {
                    this.content[n] = this.content[swap];
                    this.content[swap] = element;
                    n = swap;
                }
                else {
                    // Otherwise, we are done.
                    break;
                }
            }
        };
        return BinaryHeap;
    }());
});
define("lib/neighbors/classification", ["require", "exports", "lodash", "lib/ops/index", "lib/utils/MathExtra", "lib/neighbors/KDTree"], function (require, exports, lodash_10, ops_14, MathExtra_5, KDTree_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    MathExtra_5 = __importDefault(MathExtra_5);
    KDTree_1 = __importDefault(KDTree_1);
    var euclideanDistance = MathExtra_5.default.euclideanDistance, manhattanDistance = MathExtra_5.default.manhattanDistance;
    var DIST_EUC = 'euclidean';
    var DIST_MAN = 'manhattan';
    var TYPE_KD = 'kdtree';
    /**
     * Classifier implementing the k-nearest neighbors vote.
     *
     * @example
     * const knn = new KNeighborsClassifier();
     * const X = [[0, 0, 0], [0, 1, 1], [1, 1, 0], [2, 2, 2], [1, 2, 2], [2, 1, 2]];
     * const y = [0, 0, 0, 1, 1, 1];
     * knn.fit(X ,y);
     * console.log(knn.predict([1, 2])); // predicts 1
     */
    var KNeighborsClassifier = /** @class */ (function () {
        /**
         * @param {string} distance - Choice of distance function, should choose between euclidean | manhattan
         * @param {number} k - Number of neighbors to classify
         * @param {string} type - Type of algorithm to use, choose between kdtree(default) | balltree | simple
         */
        function KNeighborsClassifier(_a) {
            var _b = _a === void 0 ? {
                // Default value on empty constructor
                distance: DIST_EUC,
                k: 0,
                type: TYPE_KD
            } : _a, 
            // Each object param default value
            _c = _b.distance, 
            // Each object param default value
            distance = _c === void 0 ? DIST_EUC : _c, _d = _b.k, k = _d === void 0 ? 0 : _d, _e = _b.type, type = _e === void 0 ? TYPE_KD : _e;
            this.type = null;
            this.tree = null;
            this.k = null;
            this.classes = null;
            this.distance = null;
            var options = {
                distance: distance,
                k: k,
                type: type
            };
            // Handling distance
            if (options.distance === DIST_EUC) {
                this.distance = euclideanDistance;
            }
            else if (options.distance === DIST_MAN) {
                this.distance = manhattanDistance;
            }
            else {
                throw new Error("Unrecognised type of distance " + options.distance + " was received");
            }
            this.k = options.k;
            this.type = options.type;
        }
        /**
         * Train the classifier with input and output data
         * @param {any} X - Training data.
         * @param {any} y - Target data.
         */
        KNeighborsClassifier.prototype.fit = function (X, y) {
            ops_14.validateFitInputs(X, y);
            // Getting the classes from y
            var classes = lodash_10.uniqBy(y, function (c) { return c; });
            // Setting k; if it's null, use the class length
            var k = this.k ? this.k : classes.length + 1;
            //  Constructing the points placeholder
            var points = new Array(X.length);
            for (var i = 0; i < points.length; ++i) {
                points[i] = X[i].slice();
            }
            for (var i = 0; i < y.length; ++i) {
                points[i].push(y[i]);
            }
            // Building a tree or algo according to this.type
            if (this.type === TYPE_KD) {
                this.tree = new KDTree_1.default(points, this.distance);
            }
            this.k = k;
            this.classes = classes;
        };
        /**
         * Return the model's state as a JSON object
         * @return {object} JSON KNN model.
         */
        KNeighborsClassifier.prototype.toJSON = function () {
            return {
                classes: this.classes,
                distance: this.distance,
                k: this.k,
                tree: this.tree,
                type: this.type
            };
        };
        /**
         * Restores the model from a JSON checkpoint
         * @param {any} classes
         * @param {any} distance
         * @param {any} k
         * @param {any} tree
         * @param {any} type
         */
        KNeighborsClassifier.prototype.fromJSON = function (_a) {
            var _b = _a.classes, classes = _b === void 0 ? null : _b, _c = _a.distance, distance = _c === void 0 ? null : _c, _d = _a.k, k = _d === void 0 ? null : _d, _e = _a.tree, tree = _e === void 0 ? null : _e, _f = _a.type, type = _f === void 0 ? null : _f;
            if (!classes || !distance || !k || !tree || !type) {
                throw new Error('You must provide classes, distance, k, tree and type to restore the KNearestNeighbor');
            }
            this.classes = classes;
            this.distance = distance;
            this.k = k;
            this.tree = tree;
            this.type = type;
        };
        /**
         * Predict single value from a list of data
         * @param {Array} X - Prediction data.
         * @returns number
         */
        KNeighborsClassifier.prototype.predict = function (X) {
            var _this = this;
            var shape = ops_14.inferShape(X);
            if (shape.length === 1) {
                return this.getSinglePred(X);
            }
            else if (shape.length === 2) {
                return lodash_10.map(X, function (currentItem) { return _this.getSinglePred(currentItem); });
            }
            else {
                throw new TypeError('The dataset is neither an array or a matrix');
            }
        };
        /**
         * Runs a single prediction against an array based on kdTree or balltree or
         * simple algo
         * @param array
         * @returns {{}}
         */
        KNeighborsClassifier.prototype.getSinglePred = function (array) {
            if (this.tree) {
                return this.getTreeBasedPrediction(array);
            }
            else {
                // Run the simple KNN algorithm
                return 0;
            }
        };
        /**
         * Get the class with the max point
         * @param current
         * @returns {{}}
         * @ignore
         */
        KNeighborsClassifier.prototype.getTreeBasedPrediction = function (current) {
            var nearestPoints = this.tree.nearest(current, this.k);
            var pointsPerClass = {};
            var predictedClass = -1;
            var maxPoints = -1;
            var lastElement = nearestPoints[0][0].length - 1;
            // Initialising the points placeholder per class
            for (var j = 0; j < this.classes.length; j++) {
                pointsPerClass[this.classes[j]] = 0;
            }
            // Voting the max value
            for (var i = 0; i < nearestPoints.length; ++i) {
                var currentClass = nearestPoints[i][0][lastElement];
                var currentPoints = ++pointsPerClass[currentClass];
                if (currentPoints > maxPoints) {
                    predictedClass = currentClass;
                    maxPoints = currentPoints;
                }
            }
            return predictedClass;
        };
        return KNeighborsClassifier;
    }());
    exports.KNeighborsClassifier = KNeighborsClassifier;
});
define("lib/neighbors/index", ["require", "exports", "lib/neighbors/classification"], function (require, exports, classification_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.KNeighborsClassifier = classification_2.KNeighborsClassifier;
});
define("lib/svm/classes", ["require", "exports", "libsvm-js", "lodash", "lib/ops/index"], function (require, exports, libsvm_js_1, _, ops_15) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    libsvm_js_1 = __importDefault(libsvm_js_1);
    _ = __importStar(_);
    /**
     * BaseSVM class used by all parent SVM classes that are based on libsvm
     */
    var BaseSVM = /** @class */ (function () {
        function BaseSVM(options) {
            this.options = {
                cacheSize: _.get(options, 'cacheSize', 100),
                coef0: _.get(options, 'coef0', 0),
                cost: _.get(options, 'cost', 1),
                degree: _.get(options, 'degree', 3),
                epsilon: _.get(options, 'epsilon', 0.1),
                gamma: _.get(options, 'gamma', null),
                kernel: _.get(options, 'kernel', 'RBF'),
                nu: _.get(options, 'nu', 0.5),
                probabilityEstimates: _.get(options, 'probabilityEstimates', false),
                quiet: _.get(options, 'quiet', true),
                shrinking: _.get(options, 'shrinking', true),
                tolerance: _.get(options, 'tolerance', 0.001),
                weight: _.get(options, 'weight', null)
            };
        }
        /**
         * Fit the model according to the given training data.
         * @param {number[][]} X
         * @param {number[]} y
         * @returns {Promise<void>}
         */
        BaseSVM.prototype.fit = function (X, y) {
            return __awaiter(this, void 0, void 0, function () {
                var SVM, options;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            ops_15.validateFitInputs(X, y);
                            if (!this.type) {
                                throw new Error("SVM type is unspecified " + this.type);
                            }
                            return [4 /*yield*/, this.loadSVM()];
                        case 1:
                            SVM = _a.sent();
                            options = this.processOptions(SVM, this.options, this.type, this.options.kernel);
                            this.svm = new SVM(options);
                            this.svm.train(X, y);
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Predict using the linear model
         * @param {number[][]} X
         * @returns {number[]}
         */
        BaseSVM.prototype.predict = function (X) {
            ops_15.validateMatrix2D(X);
            return this.svm.predict(X);
        };
        /**
         * Predict the label of one sample.
         * @param {number[]} X
         * @returns {number}
         */
        BaseSVM.prototype.predictOne = function (X) {
            ops_15.validateMatrix1D(X);
            return this.svm.predictOne(X);
        };
        /**
         * Saves the current SVM as a JSON object
         * @returns {{svm: any; type: Type; options: SVMOptions}}
         */
        BaseSVM.prototype.toJSON = function () {
            return {
                svm: this.svm,
                type: this.type,
                options: this.options
            };
        };
        /**
         * Restores the model from a JSON checkpoint
         * @param {any} svm
         * @param {any} type
         * @param {any} options
         */
        BaseSVM.prototype.fromJSON = function (_a) {
            var _b = _a.svm, svm = _b === void 0 ? null : _b, _c = _a.type, type = _c === void 0 ? null : _c, _d = _a.options, options = _d === void 0 ? null : _d;
            if (!svm || !type || !options) {
                throw new Error('You must provide svm, type and options to restore the model');
            }
            this.svm = svm;
            this.type = type;
            this.options = options;
        };
        /**
         * Load SVM object by resolving the default promise
         * @returns {Promise<any>}
         */
        BaseSVM.prototype.loadSVM = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, libsvm_js_1.default];
                });
            });
        };
        /**
         * Get Kernel name type using string Kernel name
         * @param SVM
         * @param {string} name
         * @returns {number}
         */
        BaseSVM.prototype.getKernel = function (SVM, name) {
            return _.get(SVM.KERNEL_TYPES, name);
        };
        /**
         * Get Kernel type using string type name
         * @param SVM
         * @param {string} name
         * @returns {number}
         */
        BaseSVM.prototype.getType = function (SVM, name) {
            return _.get(SVM.SVM_TYPES, name);
        };
        /**
         * Get a consolidated options including type and Kernel
         * @param SVM
         * @param {Options} options
         * @param {Type} type
         * @param {Kernel} kernel
         * @returns {Object}
         */
        BaseSVM.prototype.processOptions = function (SVM, options, type, kernel) {
            var _this = this;
            return _.flowRight(function (opts) {
                var foundType = _this.getType(SVM, type);
                return _.set(opts, 'type', foundType);
            }, function (opts) {
                var foundKernal = _this.getKernel(SVM, kernel);
                return _.set(opts, 'kernel', foundKernal);
            })(options);
        };
        return BaseSVM;
    }());
    exports.BaseSVM = BaseSVM;
    /**
     * C-Support Vector Classification.
     *
     * The implementation is based on libsvm. The fit time complexity is more than
     * quadratic with the number of samples which makes it hard to scale to dataset
     * with more than a couple of 10000 samples.
     *
     * The multiclass support is handled according to a one-vs-one scheme.
     *
     * For details on the precise mathematical formulation of the provided kernel
     * functions and how gamma, coef0 and degree affect each other, see the corresponding
     * section in the narrative documentation: Kernel functions.
     */
    var SVC = /** @class */ (function (_super) {
        __extends(SVC, _super);
        function SVC(options) {
            var _this = _super.call(this, options) || this;
            _this.type = 'C_SVC';
            return _this;
        }
        return SVC;
    }(BaseSVM));
    exports.SVC = SVC;
    /**
     * Linear Support Vector Regression.
     *
     * Similar to SVR with parameter kernel=’linear’, but implemented in terms of
     * liblinear rather than libsvm, so it has more flexibility in the choice of
     * penalties and loss functions and should scale better to large numbers of samples.
     *
     * This class supports both dense and sparse input.
     */
    var SVR = /** @class */ (function (_super) {
        __extends(SVR, _super);
        function SVR(options) {
            var _this = _super.call(this, options) || this;
            _this.type = 'EPSILON_SVR';
            return _this;
        }
        return SVR;
    }(BaseSVM));
    exports.SVR = SVR;
    /**
     * Unsupervised Outlier Detection.
     *
     * Estimate the support of a high-dimensional distribution.
     *
     * The implementation is based on libsvm.
     */
    var OneClassSVM = /** @class */ (function (_super) {
        __extends(OneClassSVM, _super);
        function OneClassSVM(options) {
            var _this = _super.call(this, options) || this;
            _this.type = 'ONE_CLASS';
            return _this;
        }
        return OneClassSVM;
    }(BaseSVM));
    exports.OneClassSVM = OneClassSVM;
    /**
     * Nu-Support Vector Classification.
     *
     * Similar to SVC but uses a parameter to control the number of support vectors.
     *
     * The implementation is based on libsvm.
     */
    var NuSVC = /** @class */ (function (_super) {
        __extends(NuSVC, _super);
        function NuSVC(options) {
            var _this = _super.call(this, options) || this;
            _this.type = 'NU_SVC';
            return _this;
        }
        return NuSVC;
    }(BaseSVM));
    exports.NuSVC = NuSVC;
    /**
     * Nu Support Vector Regression.
     *
     * Similar to NuSVC, for regression, uses a parameter nu to control the number
     * of support vectors. However, unlike NuSVC, where nu replaces C, here nu
     * replaces the parameter epsilon of epsilon-SVR.
     *
     * The implementation is based on libsvm.
     */
    var NuSVR = /** @class */ (function (_super) {
        __extends(NuSVR, _super);
        function NuSVR(options) {
            var _this = _super.call(this, options) || this;
            _this.type = 'NU_SVR';
            return _this;
        }
        return NuSVR;
    }(BaseSVM));
    exports.NuSVR = NuSVR;
});
define("lib/svm/index", ["require", "exports", "lib/svm/classes"], function (require, exports, classes_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BaseSVM = classes_1.BaseSVM;
    exports.NuSVC = classes_1.NuSVC;
    exports.NuSVR = classes_1.NuSVR;
    exports.OneClassSVM = classes_1.OneClassSVM;
    exports.SVC = classes_1.SVC;
    exports.SVR = classes_1.SVR;
});
define("lib/index", ["require", "exports", "lib/cluster/index", "lib/datasets/index", "lib/decomposition/index", "lib/ensemble/index", "lib/feature_extraction/index", "lib/linear_model/index", "lib/metrics/index", "lib/model_selection/index", "lib/neighbors/index", "lib/preprocessing/index", "lib/svm/index", "lib/tree/index"], function (require, exports, cluster, datasets, decomposition, ensemble, feature_extraction, linear_model, metrics, model_selection, neighbors, preprocessing, svm, tree) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    cluster = __importStar(cluster);
    datasets = __importStar(datasets);
    decomposition = __importStar(decomposition);
    ensemble = __importStar(ensemble);
    feature_extraction = __importStar(feature_extraction);
    linear_model = __importStar(linear_model);
    metrics = __importStar(metrics);
    model_selection = __importStar(model_selection);
    neighbors = __importStar(neighbors);
    preprocessing = __importStar(preprocessing);
    svm = __importStar(svm);
    tree = __importStar(tree);
    exports.cluster = cluster;
    exports.datasets = datasets;
    exports.decomposition = decomposition;
    exports.ensemble = ensemble;
    exports.feature_extraction = feature_extraction;
    exports.linear_model = linear_model;
    exports.metrics = metrics;
    exports.model_selection = model_selection;
    exports.neighbors = neighbors;
    exports.preprocessing = preprocessing;
    exports.svm = svm;
    exports.tree = tree;
});
define("lib/cluster/index.repl", ["require", "exports", "lib/cluster/k_means"], function (require, exports, k_means_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var kmean = new k_means_2.KMeans({ k: 2 });
    var clusters = kmean.fit([[1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0]]);
    console.log('checking clusters', clusters);
    var predResult = kmean.predict([[0, 0], [4, 4]]);
    console.log(predResult);
});
/* tslint:disable */
define("lib/datasets/index.repl", ["require", "exports", "lib/datasets/Iris", "lib/datasets/Boston"], function (require, exports, Iris_2, Boston_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var irisData = new Iris_2.Iris();
    irisData.load().then(function (data) {
        var description = data.description;
        console.log('checking desc', description);
    });
    var bostonData = new Boston_2.Boston();
    bostonData.load().then(function (data) {
        console.log(data);
    });
});
define("lib/decomposition/index.repl", ["require", "exports", "lib/decomposition/pca"], function (require, exports, pca_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var pca = new pca_2.PCA();
    var X = [[1, 2], [3, 4], [5, 6]];
    pca.fit(X);
    console.log('components', pca.components);
    console.log('explained var', pca.explained_variance);
});
define("lib/ensemble/index.repl", ["require", "exports", "lib/ensemble/forest", "lib/datasets/Iris"], function (require, exports, forest_2, Iris_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    (function () {
        return __awaiter(this, void 0, void 0, function () {
            var irisDataset, _a, data, targets, X, y, randomForest, rf2;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        irisDataset = new Iris_3.Iris();
                        return [4 /*yield*/, irisDataset.load()];
                    case 1:
                        _a = _b.sent(), data = _a.data, targets = _a.targets;
                        X = [[0, 0], [1, 1], [2, 1], [1, 5], [3, 2]];
                        y = [0, 1, 2, 3, 7];
                        randomForest = new forest_2.RandomForestClassifier();
                        randomForest.fit(X, y);
                        console.log(randomForest.predict([[0, 3], [2, 1]]));
                        rf2 = new forest_2.RandomForestClassifier();
                        rf2.fit(data, targets);
                        console.log('pred', rf2.predict([[6.7, 3, 5.2, 2.3]]));
                        return [2 /*return*/];
                }
            });
        });
    })();
});
define("lib/feature_extraction/index.repl", ["require", "exports", "lib/feature_extraction/text"], function (require, exports, text_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var cv = new text_2.CountVectorizer();
    var text1 = ['deep learning ian good fellow learning jason shin shin', 'yoshua bengio'];
    var vocabCounts = cv.fit_transform(text1);
    console.log(vocabCounts);
    console.log(cv.vocabulary);
    console.log(cv.getFeatureNames());
    var newVocabCounts = cv.transform(['ian good fellow jason duuog']);
    console.log(newVocabCounts);
});
/* tslint:disable */
define("lib/linear_model/index.repl", ["require", "exports", "lib/linear_model/index", "lib/linear_model/index", "lib/linear_model/index", "lib/linear_model/index"], function (require, exports, _1, _2, _3, _4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var lr = new _1.LinearRegression();
    var X = [1, 2, 4, 3, 5];
    var y = [1, 3, 3, 2, 5];
    lr.fit(X, y);
    console.log(lr.predict([1, 2]));
    var lr2 = new _1.LinearRegression();
    lr2.fit([[1, 1], [1, 2], [2, 2], [2, 3]], [1, 1, 2, 2]);
    console.log(lr2.predict([[1, 1]]));
    var sgd = new _2.SGDClassifier();
    var X1 = [
        [7, 0.27, 0.36, 20.7, 0.045, 45, 170, 1.001, 3, 0.45, 8.8],
        [6.3, 0.3, 0.34, 1.6, 0.049, 14, 132, 0.994, 3.3, 0.49, 9.5],
        [8.1, 0.28, 0.4, 6.9, 0.05, 30, 97, 0.9951, 3.26, 0.44, 10.1],
        [7.2, 0.23, 0.32, 8.5, 0.058, 47, 186, 0.9956, 3.19, 0.4, 9.9],
        [7.2, 0.23, 0.32, 8.5, 0.058, 47, 186, 0.9956, 3.19, 0.4, 9.9]
    ];
    var y1 = [1, 2, 3, 4, 5];
    sgd.fit(X1, y1);
    var result = sgd.predict([
        [7, 0.27, 0.36, 20.7, 0.045, 45, 170, 1.001, 3, 0.45, 8.8],
        [8.1, 0.28, 0.4, 6.9, 0.05, 30, 97, 0.9951, 3.26, 0.44, 10.1],
        [7.2, 0.23, 0.32, 8.5, 0.058, 47, 186, 0.9956, 3.19, 0.4, 9.9],
        [7.2, 0.23, 0.32, 8.5, 0.058, 47, 186, 0.9956, 3.19, 0.4, 9.9]
    ]);
    console.log('checking res', result);
    var reg = new _2.SGDRegressor();
    var X2 = [[0, 0], [1, 1]];
    var y2 = [0, 1];
    reg.fit(X2, y2);
    console.log(reg.predict([[2, 2]]));
    console.log('checking res', result);
    var clf = new _2.SGDClassifier();
    var X3 = [[0, 0], [1, 1]];
    var y3 = [0, 1];
    clf.fit(X3, y3);
    console.log(clf.predict([[2, 2]]));
    var rr = new _3.Ridge({
        l2: 10
    });
    rr.fit(X1, y1);
    var result2 = rr.predict([
        [7, 0.27, 0.36, 20.7, 0.045, 45, 170, 1.001, 3, 0.45, 8.8],
        [8.1, 0.28, 0.4, 6.9, 0.05, 30, 97, 0.9951, 3.26, 0.44, 10.1],
        [7.2, 0.23, 0.32, 8.5, 0.058, 47, 186, 0.9956, 3.19, 0.4, 9.9],
        [7.2, 0.23, 0.32, 8.5, 0.058, 47, 186, 0.9956, 3.19, 0.4, 9.9]
    ]);
    console.log('checking res', result2);
    var reg1 = new _4.Lasso({ degree: 2, l1: 1 });
    reg1.fit([[0, 0], [1, 1]], [0, 1]);
    console.log('lasso', reg1.predict([[1, 1], [2, 3]]));
});
/* tslint:disable */
define("lib/metrics/index.repl", ["require", "exports", "lib/metrics/classification", "lib/metrics/regression"], function (require, exports, classification_3, regression_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var accResult = classification_3.accuracyScore([0, 1, 2, 3], [0, 2, 1, 3]);
    console.log('accuracy result ', accResult);
    var accResultNorm = classification_3.accuracyScore([0, 1, 2, 3], [0, 2, 1, 3], {
        normalize: false
    });
    console.log('accuracy result with norm false ', accResultNorm);
    var loss_zero_one_result = classification_3.zeroOneLoss([1, 2, 3, 4], [2, 2, 3, 5]);
    console.log('loss zero one ', loss_zero_one_result);
    var matrix1 = classification_3.confusion_matrix([1, 2, 3], [1, 2, 3]);
    console.log(matrix1);
    var matrix2 = classification_3.confusion_matrix([2, 0, 2, 2, 0, 1], [0, 0, 2, 2, 0, 2]);
    console.log(matrix2);
    var matrix3 = classification_3.confusion_matrix(['cat', 'ant', 'cat', 'cat', 'ant', 'bird'], ['ant', 'ant', 'cat', 'cat', 'ant', 'cat']);
    console.log(matrix3);
    var y_true = [3, -0.5, 2, 7];
    var y_pred = [2.5, 0.0, 2, 8];
    console.log(regression_2.mean_squared_error(y_true, y_pred));
    var y_true1 = [[0.5, 1], [-1, 1], [7, -6]];
    var y_pred1 = [[0, 2], [-1, 2], [8, -5]];
    console.log(regression_2.mean_squared_error(y_true1, y_pred1));
    console.log(regression_2.mean_absolute_error([3, -0.5, 2, 7], [2.5, 0.0, 2, 8]));
    console.log(regression_2.mean_absolute_error([[0.5, 1], [-1, 1], [7, -6]], [[0, 2], [-1, 2], [8, -5]], { sample_weight: [1, 2] }));
});
define("lib/model_selection/index.repl", ["require", "exports", "lib/model_selection/_split"], function (require, exports, _split_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var X = [[0, 1], [2, 3], [4, 5], [6, 7], [8, 9]];
    var y = [0, 1, 2, 3, 4];
    console.log('original X', X);
    console.log('original y', y);
    console.log('train test split');
    console.log(_split_2.train_test_split(X, y, {
        test_size: 0.33,
        train_size: 0.67,
        random_state: 42
    }));
    var kf = new _split_2.KFold({ k: 5 });
    var X2 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    console.log(kf.split(X2, X2));
    var kf2 = new _split_2.KFold({ k: 10, shuffle: true });
    var X3 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    console.log(kf2.split(X3, X2));
});
define("lib/naive_bayes/gaussian", ["require", "exports", "@tensorflow/tfjs", "lodash", "lib/ops/index"], function (require, exports, tf, lodash_11, ops_16) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    tf = __importStar(tf);
    var SQRT_2PI = Math.sqrt(Math.PI * 2);
    /**
     * The Naive is an intuitive method that uses probabilistic of each attribute
     * being in each class to make a prediction. It uses Gaussian function to estimate
     * probability of a given class.
     *
     * @example
     * import { GaussianNB } from 'machinelearn/naive_bayes';
     *
     * const nb = new GaussianNB();
     * const X = [[1, 20], [2, 21], [3, 22], [4, 22]];
     * const y = [1, 0, 1, 0];
     * nb.fit({ X, y });
     * nb.predict({ X: [[1, 20]] }); // returns [ 1 ]
     *
     */
    var GaussianNB = /** @class */ (function () {
        function GaussianNB() {
        }
        /**
         * @param X - array-like or sparse matrix of shape = [n_samples, n_features]
         * @param y - array-like, shape = [n_samples] or [n_samples, n_outputs]
         */
        GaussianNB.prototype.fit = function (X, y) {
            if (X === void 0) { X = null; }
            if (y === void 0) { y = null; }
            ops_16.validateFitInputs(X, y);
            var _a = this.fitModel(X, y), classCategories = _a.classCategories, mean = _a.mean, variance = _a.variance;
            this.classCategories = classCategories;
            this.mean = mean;
            this.variance = variance;
        };
        /**
         * @param X - array-like, shape = [n_samples, n_features]
         */
        GaussianNB.prototype.predict = function (X) {
            var _this = this;
            if (X === void 0) { X = null; }
            ops_16.validateMatrix2D(X);
            return X.map(function (x) { return _this.singlePredict(x); });
        };
        /**
         * Restore the model from saved states
         * @param modelState
         */
        GaussianNB.prototype.fromJSON = function (_a) {
            var _b = _a.classCategories, classCategories = _b === void 0 ? null : _b, _c = _a.mean, mean = _c === void 0 ? null : _c, _d = _a.variance, variance = _d === void 0 ? null : _d;
            this.classCategories = classCategories;
            this.mean = tf.tensor2d(mean);
            this.variance = tf.tensor2d(variance);
        };
        /**
         * Save the model's states
         */
        GaussianNB.prototype.toJSON = function () {
            return {
                classCategories: this.classCategories,
                mean: ops_16.reshape(__spread(this.mean.dataSync()), this.mean.shape),
                variance: ops_16.reshape(__spread(this.variance.dataSync()), this.variance.shape)
            };
        };
        /**
         * Make a single prediction
         *
         * @param  {ReadonlyArray<number>} X- values to predict in Matrix format
         * @returns T
         */
        GaussianNB.prototype.singlePredict = function (X) {
            var matrixX = tf.tensor1d(X, 'float32');
            var numFeatures = matrixX.shape[0];
            // Comparing input and summary shapes
            var summaryLength = this.mean.shape[1];
            if (numFeatures !== summaryLength) {
                throw new Error("Prediction input " + matrixX.shape[0] + " length must be equal or less than summary length " + summaryLength);
            }
            var meanValPow = matrixX
                .sub(this.mean)
                .pow(tf.scalar(2))
                .mul(tf.scalar(-1));
            var exponent = meanValPow
                .div(this.variance.mul(tf.scalar(2)))
                .exp();
            var innerDiv = tf.scalar(SQRT_2PI).mul(this.variance.sqrt());
            var probabilityArray = tf
                .scalar(1)
                .div(innerDiv)
                .mul(exponent);
            var selectionIndex = probabilityArray
                .prod(1)
                .argMax()
                .dataSync()[0];
            return this.classCategories[selectionIndex];
        };
        /**
         * Summarise the dataset per class using "probability density function"
         *
         * @param  {Type2DMatrix<number>} X
         * @param  {ReadonlyArray<T>} y
         * @returns InterfaceFitModel
         */
        GaussianNB.prototype.fitModel = function (X, y) {
            var classCategories = __spread(new Set(y)).sort();
            // Separates X by classes specified by y argument
            var separatedByCategory = lodash_11.zip(X, y).reduce(function (groups, _a) {
                var _b = __read(_a, 2), row = _b[0], category = _b[1];
                groups[category.toString()] = groups[category.toString()] || [];
                groups[category.toString()].push(row);
                return groups;
            }, {});
            var momentStack = classCategories.map(function (category) {
                var classFeatures = tf.tensor2d(separatedByCategory[category.toString()], null, 'float32');
                return tf.moments(classFeatures, [0]);
            });
            // For every class we have a mean and variance for each feature
            var mean = tf.stack(momentStack.map(function (m) { return m.mean; }));
            var variance = tf.stack(momentStack.map(function (m) { return m.variance; }));
            // TODO check for NaN or 0 variance
            // setTimeout(() => {
            //   if ([...variance.dataSync()].some(i => i === 0)) {
            //     console.error('No variance on one of the features. Errors may result.');
            //   }
            // }, 100);
            return {
                classCategories: classCategories,
                mean: mean,
                variance: variance
            };
        };
        return GaussianNB;
    }());
    exports.GaussianNB = GaussianNB;
});
define("lib/naive_bayes/multinomial", ["require", "exports", "@tensorflow/tfjs", "lodash", "lib/ops/index"], function (require, exports, tf, lodash_12, ops_17) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    tf = __importStar(tf);
    /**
     * Multinomial naive bayes machine learning algorithm
     *
     * The Naive is an intuitive method that uses probabilistic of each attribute
     * being in each class to make a prediction. It uses multinomial function to estimate
     * probability of a given class.
     *
     * @example
     * import { MultinomialNB } from 'machinelearn/naive_bayes';
     *
     * const nb = new MultinomialNB();
     * const X = [[1, 20], [2, 21], [3, 22], [4, 22]];
     * const y = [1, 0, 1, 0];
     * nb.fit({ X, y });
     * nb.predict({ X: [[1, 20]] }); // returns [ 1 ]
     *
     */
    var MultinomialNB = /** @class */ (function () {
        function MultinomialNB() {
            this.alpha = 1;
        }
        // constructor(private readonly alpha: number = 1) {}
        /**
         * Fit date to build Gaussian Distribution summary
         *
         * @param  {Type2DMatrix<number>} X - training values
         * @param  {ReadonlyArray<T>} y - target values
         * @returns void
         */
        MultinomialNB.prototype.fit = function (X, y) {
            if (X === void 0) { X = null; }
            if (y === void 0) { y = null; }
            ops_17.validateFitInputs(X, y);
            var _a = this.fitModel(X, y), classCategories = _a.classCategories, multinomialDist = _a.multinomialDist, priorProbability = _a.priorProbability;
            this.classCategories = classCategories;
            this.multinomialDist = multinomialDist;
            this.priorProbability = priorProbability;
        };
        /**
         * Predict multiple rows
         *
         * @param  {Type2DMatrix<number>} X - values to predict in Matrix format
         * @returns T
         */
        MultinomialNB.prototype.predict = function (X) {
            var _this = this;
            if (X === void 0) { X = null; }
            ops_17.validateMatrix2D(X);
            if (lodash_12.isEmpty(this.classCategories) ||
                lodash_12.isEmpty(this.multinomialDist) ||
                lodash_12.isEmpty(this.priorProbability)) {
                throw new TypeError('You should fit the model first before running the predict!');
            }
            return X.map(function (x) { return _this.singlePredict(x); });
        };
        /**
         * Returns a model checkpoint
         *
         * @returns InterfaceFitModelAsArray
         */
        MultinomialNB.prototype.toJSON = function () {
            return {
                classCategories: Array.from(this.classCategories),
                priorProbability: Array.from(this.priorProbability.dataSync()),
                multinomialDist: ops_17.reshape(Array.from(this.multinomialDist.dataSync()), this.multinomialDist.shape)
            };
        };
        /**
         * Restore the model from states
         * @param multinomialDist - Multinomial distribution values over classes
         * @param priorProbability - Learned prior class probabilities
         * @param classCategories - List of unique class categories
         */
        MultinomialNB.prototype.fromJSON = function (_a) {
            var _b = _a === void 0 ? {
                multinomialDist: null,
                priorProbability: null,
                classCategories: null
            } : _a, _c = _b.multinomialDist, multinomialDist = _c === void 0 ? null : _c, _d = _b.priorProbability, priorProbability = _d === void 0 ? null : _d, _e = _b.classCategories, classCategories = _e === void 0 ? null : _e;
            this.classCategories = classCategories;
            this.priorProbability = tf.tensor1d(priorProbability);
            this.multinomialDist = tf.tensor2d(multinomialDist);
        };
        /**
         * Make a prediction
         *
         * @param  {ReadonlyArray<number>} predictRow
         * @returns T
         */
        MultinomialNB.prototype.singlePredict = function (predictRow) {
            var matrixX = tf.tensor1d(predictRow, 'float32');
            var numFeatures = matrixX.shape[0];
            var summaryLength = this.multinomialDist.shape[1];
            // Comparing input and summary shapes
            if (numFeatures !== summaryLength) {
                throw new Error("Prediction input " + matrixX.shape[0] + " length must be equal or less than summary length " + summaryLength);
            }
            // log is important to use different multinomial formula instead of the factorial formula
            // The multinomial naive Bayes classifier becomes a linear
            // classifier when expressed in log-space
            // const priorProbability = Math.log(1 / classCount);
            var fitProbabilites = this.multinomialDist
                .clone()
                .mul(matrixX);
            // sum(1) is summing columns
            var allProbabilities = fitProbabilites
                .sum(1)
                .add(this.priorProbability);
            var selectionIndex = allProbabilities.argMax().dataSync()[0];
            allProbabilities.dispose();
            return this.classCategories[selectionIndex];
        };
        /**
         * Summarise the dataset per class
         *
         * @param  {Type2DMatrix<number>} X - input distribution
         * @param  {ReadonlyArray<T>} y - classes to train
         */
        MultinomialNB.prototype.fitModel = function (X, y) {
            var classCounts = lodash_12.countBy(y);
            var classCategories = Array.from(new Set(y));
            var numFeatures = X[0].length;
            var separatedByCategory = lodash_12.zip(X, y).reduce(function (groups, _a) {
                var _b = __read(_a, 2), row = _b[0], category = _b[1];
                if (!(category.toString() in groups)) {
                    groups[category.toString()] = [];
                }
                groups[category.toString()].push(tf.tensor1d(row, 'float32'));
                return groups;
            }, {});
            var frequencySumByClass = tf.stack(classCategories.map(function (category) {
                return tf.addN(separatedByCategory[category.toString()]);
            }));
            var productReducedRow = Array.from(frequencySumByClass.sum(1).dataSync());
            // A class's prior may be calculated by assuming equiprobable classes
            // (i.e., priors = (number of samples in the class) / (total number of samples))
            var priorProbability = tf
                .tensor1d(classCategories.map(function (c) { return classCounts[c.toString()] / y.length; }), 'float32')
                .log();
            // log transform to use linear multinomial forumla
            var multinomialDist = frequencySumByClass
                .add(tf.scalar(this.alpha))
                .div(tf
                .tensor2d(productReducedRow, [frequencySumByClass.shape[0], 1], 'float32')
                .add(tf.scalar(numFeatures * this.alpha)))
                .log();
            return {
                classCategories: classCategories,
                multinomialDist: multinomialDist,
                priorProbability: priorProbability
            };
        };
        return MultinomialNB;
    }());
    exports.MultinomialNB = MultinomialNB;
});
define("lib/naive_bayes/index", ["require", "exports", "lib/naive_bayes/gaussian", "lib/naive_bayes/multinomial"], function (require, exports, gaussian_1, multinomial_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GaussianNB = gaussian_1.GaussianNB;
    exports.MultinomialNB = multinomial_1.MultinomialNB;
});
define("lib/naive_bayes/index.repl", ["require", "exports", "lib/naive_bayes/index"], function (require, exports, _5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var nb = new _5.GaussianNB();
    var X = [[1, 20], [2, 21], [3, 22], [4, 22]];
    var y = [1, 0, 1, 0];
    nb.fit(X, y);
    var pred = nb.predict([[1, 20]]);
    console.log(pred);
});
define("lib/neighbors/index.repl", ["require", "exports", "lib/neighbors/classification"], function (require, exports, classification_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var knn = new classification_4.KNeighborsClassifier();
    var X = [[0, 0, 0], [0, 1, 1], [1, 1, 0], [2, 2, 2], [1, 2, 2], [2, 1, 2]];
    var y = [0, 0, 0, 1, 1, 1];
    knn.fit(X, y);
    console.log('predict', knn.predict([1, 2]));
});
define("lib/ops/index.repl", ["require", "exports", "lib/ops/tensor_ops"], function (require, exports, tensor_ops_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var result = tensor_ops_2.inferShape([[1, 2]]);
    console.log(result);
    console.log(tensor_ops_2.validateMatrixType([['z', 'z']], ['string']));
});
define("lib/preprocessing/index.repl", ["require", "exports", "lib/preprocessing/data", "lib/preprocessing/Imputer", "lib/preprocessing/data", "lib/preprocessing/label", "lib/preprocessing/data"], function (require, exports, data_2, Imputer_2, data_3, label_2, data_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    // Playing around with onehotencoder
    var enc = new data_2.OneHotEncoder();
    var planetList = [
        { planet: 'mars', isGasGiant: false, value: 10 },
        { planet: 'saturn', isGasGiant: true, value: 20 },
        { planet: 'jupiter', isGasGiant: true, value: 30 }
    ];
    var encodeInfo = enc.encode(planetList, {
        dataKeys: ['value', 'isGasGiant'],
        labelKeys: ['planet']
    });
    console.log(encodeInfo.data);
    var decodedInfo = enc.decode(encodeInfo.data, encodeInfo.decoders);
    console.log(decodedInfo);
    // MinMaxScaler
    var minmaxScaler = new data_2.MinMaxScaler({ featureRange: [0, 1] });
    minmaxScaler.fit([4, 5, 6]);
    var result = minmaxScaler.fit_transform([4, 5, 6]);
    console.log('minmax result', result);
    var minmaxScaler2 = new data_2.MinMaxScaler({ featureRange: [0, 1] });
    minmaxScaler2.fit([[1, 2, 3], [4, 5, 6]]);
    var result2 = minmaxScaler2.transform([[1, 2, 3]]);
    console.log('minmax result 2', result2);
    var testX = [[1, 2], [null, 3], [7, 6]];
    var imp = new Imputer_2.Imputer({ missingValues: null, axis: 0 });
    imp.fit(testX);
    var impResult = imp.fit_transform([[null, 2], [6, null], [7, 6]]);
    console.log('checking result', impResult);
    var binX = [[1, -1, 2], [2, 0, 0], [0, 1, -1]];
    var newBin = new data_3.Binarizer({ threshold: 0 });
    var binResult = newBin.transform(binX);
    console.log('binresult: ', binResult);
    var le = new label_2.LabelEncoder();
    var labelX = ['amsterdam', 'paris', 'tokyo'];
    le.fit(labelX);
    var transformX = ['tokyo', 'tokyo', 'paris'];
    var leResult = le.transform(transformX);
    console.log(leResult);
    var dummy = data_4.add_dummy_feature([[0, 1, 2], [1, 0, 3]]);
    console.log(dummy);
});
define("lib/svm/index.repl", ["require", "exports", "lib/svm/classes"], function (require, exports, classes_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    console.log('running xor example');
    function svcTest() {
        return __awaiter(this, void 0, void 0, function () {
            var svc2, X, y, err;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        console.log('inside svctest');
                        svc2 = new classes_2.SVC();
                        X = [[-1, -1], [-2, -1], [1, 1], [2, 1]];
                        y = [-1, 1, 2, 2];
                        return [4 /*yield*/, svc2.fit(X, y)];
                    case 1:
                        err = _a.sent();
                        console.log('result ', err);
                        try {
                            console.log('svc2 pred ', svc2.predict([[-0.8, -1]]));
                        }
                        catch (e) {
                            console.log('err', e);
                        }
                        return [2 /*return*/];
                }
            });
        });
    }
    svcTest().then(function () { return console.log('svc2 test finished'); });
    function xor() {
        return __awaiter(this, void 0, void 0, function () {
            var svc, features, labels;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        svc = new classes_2.SVC();
                        features = [[0, 0], [1, 1]];
                        labels = [0, 1];
                        return [4 /*yield*/, svc.fit(features, labels)];
                    case 1:
                        _a.sent();
                        console.log('SVC predict result', svc.predictOne([2, 2]));
                        return [2 /*return*/];
                }
            });
        });
    }
    xor().then(function () { return console.log('finished SVC'); });
    function xor2() {
        return __awaiter(this, void 0, void 0, function () {
            var svr, features, labels;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        svr = new classes_2.SVR();
                        features = [[0, 0], [2, 2]];
                        labels = [0.5, 2.5];
                        return [4 /*yield*/, svr.fit(features, labels)];
                    case 1:
                        _a.sent();
                        console.log('SVR predict result', svr.predict([[1, 1]]));
                        return [2 /*return*/];
                }
            });
        });
    }
    xor2().then(function () { return console.log('finished SVR'); });
});
/* tslint:disable */
define("lib/tree/index.repl", ["require", "exports", "lib/tree/tree", "lib/datasets/index"], function (require, exports, tree_3, datasets_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    (function () {
        return __awaiter(this, void 0, void 0, function () {
            var features, decision, X, y, predictResult, predictResults, decision2, X2, y2, predictResult2, iris, _a, data, targets, decision3;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        features = ['color', 'diameter', 'label'];
                        decision = new tree_3.DecisionTreeClassifier({ featureLabels: features });
                        X = [
                            ['Green', 3],
                            ['Yellow', 3],
                            ['Red', 1],
                            ['Red', 1],
                            ['Yellow', 3]
                        ];
                        y = ['Apple', 'Apple', 'Grape', 'Grape', 'Lemon'];
                        decision.fit(X, y);
                        decision.printTree();
                        predictResult = decision.predict([['Green', 3]]);
                        console.log('predict result', predictResult);
                        predictResults = decision.predict(X);
                        console.log('predicted all results', predictResults);
                        decision2 = new tree_3.DecisionTreeClassifier({ featureLabels: null });
                        X2 = [[0, 0], [1, 1]];
                        y2 = [0, 1];
                        decision2.fit(X2, y2);
                        predictResult2 = decision2.predict([[0, 1]]);
                        console.log('checking predict 2', predictResult2);
                        iris = new datasets_1.Iris();
                        return [4 /*yield*/, iris.load()];
                    case 1:
                        _a = _b.sent(), data = _a.data, targets = _a.targets;
                        decision3 = new tree_3.DecisionTreeClassifier();
                        decision3.fit(data, targets);
                        console.log('checking the result');
                        console.log(decision3.predict([[5.9, 3, 5.1, 1.8]]));
                        return [2 /*return*/];
                }
            });
        });
    })();
});
//# sourceMappingURL=data:application/json;base64,